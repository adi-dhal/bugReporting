{"data":[{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2865","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2865/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2865/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2865/events","html_url":"https://github.com/libgdx/libgdx/issues/2865","id":58379727,"number":2865,"title":"NoSuchMethodError: java.nio.xxxBuffer.rewind() on iOS [RoboVM bug?]","user":{"login":"FyiurAmron","id":11016998,"avatar_url":"https://avatars1.githubusercontent.com/u/11016998?v=4","gravatar_id":"","url":"https://api.github.com/users/FyiurAmron","html_url":"https://github.com/FyiurAmron","followers_url":"https://api.github.com/users/FyiurAmron/followers","following_url":"https://api.github.com/users/FyiurAmron/following{/other_user}","gists_url":"https://api.github.com/users/FyiurAmron/gists{/gist_id}","starred_url":"https://api.github.com/users/FyiurAmron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FyiurAmron/subscriptions","organizations_url":"https://api.github.com/users/FyiurAmron/orgs","repos_url":"https://api.github.com/users/FyiurAmron/repos","events_url":"https://api.github.com/users/FyiurAmron/events{/privacy}","received_events_url":"https://api.github.com/users/FyiurAmron/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-02-20T16:57:52Z","updated_at":"2015-04-27T22:59:03Z","closed_at":"2015-03-09T13:44:12Z","author_association":"CONTRIBUTOR","body":"On bleeding-edge libGDX 1.5.5-SNAPSHOT + RoboVM 1.0.0-SNAPSHOT trying to e.g. use `.rewind()` or `limit()` on _any_ of the java.nio.Buffer subclass objects causes a `java.lang.NoSuchMethodError: java.nio.xxxBuffer.rewind()Ljava/nio/xxxBuffer;` - on my setup I'm able to replicate the the issue with a libGDX app stub with by simply creating any buffer any trying to rewind it.\n\n``` java\nIntBuffer ib = BufferUtils.newIntBuffer(16);\nib.rewind(); // killer line\nFloatBuffer fb = FloatBuffer.allocate(16);\nfb.limit(0); // ditto\n```\n\nTests were done on iOS Simulator - iPhone 4s / iOS 8.3; I haven't a provisioned iOS device available currently to verify this on real iOS.\n\nRoboVM docs clearly show that those Buffer classes should be present, as well as the `.rewind()` method. Note that this also happened when trying RoboVM 1.0.0-alpha-01, 0.0.14.1, 0.0.8.1, libGDX 1.5.4, 1.0.0 etc., so it seems it's not a regression of any kind.\n\nSince using FloatBuffer.allocate(16) is causing the same bevahiour, it's probably RoboVM related and not directly concerning libGDX - yet can anyone verify/check if he's able to repro it too and/or have any insight why does this happen?\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2865/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2864","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2864/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2864/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2864/events","html_url":"https://github.com/libgdx/libgdx/issues/2864","id":58354844,"number":2864,"title":"Different versions of Hiero","user":{"login":"nooone","id":5896510,"avatar_url":"https://avatars3.githubusercontent.com/u/5896510?v=4","gravatar_id":"","url":"https://api.github.com/users/nooone","html_url":"https://github.com/nooone","followers_url":"https://api.github.com/users/nooone/followers","following_url":"https://api.github.com/users/nooone/following{/other_user}","gists_url":"https://api.github.com/users/nooone/gists{/gist_id}","starred_url":"https://api.github.com/users/nooone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nooone/subscriptions","organizations_url":"https://api.github.com/users/nooone/orgs","repos_url":"https://api.github.com/users/nooone/repos","events_url":"https://api.github.com/users/nooone/events{/privacy}","received_events_url":"https://api.github.com/users/nooone/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-02-20T13:48:13Z","updated_at":"2015-02-20T15:14:10Z","closed_at":"2015-02-20T14:13:08Z","author_association":"CONTRIBUTOR","body":"Currently there are two different versions of Hiero. [Hiero](https://github.com/libgdx/libgdx/blob/master/extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero.java) and [Hiero4](https://github.com/libgdx/libgdx/blob/master/extensions/gdx-tools/src/com/badlogic/gdx/tools/hiero/Hiero4.java).\n\nEven though Hiero4 has a higher version number, it still seems to lack some features that Hiero (Hiero v3) offers, e. g. the possibility to add effects.\n\n@NathanSweet What's the purpose of Hiero4? Could it be removed?\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2863","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2863/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2863/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2863/events","html_url":"https://github.com/libgdx/libgdx/pull/2863","id":58345434,"number":2863,"title":"Added TexturePacker silent mode","user":{"login":"kotcrab","id":4594081,"avatar_url":"https://avatars1.githubusercontent.com/u/4594081?v=4","gravatar_id":"","url":"https://api.github.com/users/kotcrab","html_url":"https://github.com/kotcrab","followers_url":"https://api.github.com/users/kotcrab/followers","following_url":"https://api.github.com/users/kotcrab/following{/other_user}","gists_url":"https://api.github.com/users/kotcrab/gists{/gist_id}","starred_url":"https://api.github.com/users/kotcrab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kotcrab/subscriptions","organizations_url":"https://api.github.com/users/kotcrab/orgs","repos_url":"https://api.github.com/users/kotcrab/repos","events_url":"https://api.github.com/users/kotcrab/events{/privacy}","received_events_url":"https://api.github.com/users/kotcrab/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-20T12:23:32Z","updated_at":"2015-02-28T21:44:36Z","closed_at":"2015-02-20T13:31:21Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2863","html_url":"https://github.com/libgdx/libgdx/pull/2863","diff_url":"https://github.com/libgdx/libgdx/pull/2863.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2863.patch"},"body":"Added setting to run texture packer in silent mode that doesn't output information about packing progress. This may be useful for tools that uses texture packer from code and doesn't want to output progress information.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2862","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2862/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2862/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2862/events","html_url":"https://github.com/libgdx/libgdx/issues/2862","id":58277672,"number":2862,"title":"GLSurfaceView20API18 seems to be used only on api level <= 10","user":{"login":"jwisniewski","id":3899440,"avatar_url":"https://avatars3.githubusercontent.com/u/3899440?v=4","gravatar_id":"","url":"https://api.github.com/users/jwisniewski","html_url":"https://github.com/jwisniewski","followers_url":"https://api.github.com/users/jwisniewski/followers","following_url":"https://api.github.com/users/jwisniewski/following{/other_user}","gists_url":"https://api.github.com/users/jwisniewski/gists{/gist_id}","starred_url":"https://api.github.com/users/jwisniewski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jwisniewski/subscriptions","organizations_url":"https://api.github.com/users/jwisniewski/orgs","repos_url":"https://api.github.com/users/jwisniewski/repos","events_url":"https://api.github.com/users/jwisniewski/events{/privacy}","received_events_url":"https://api.github.com/users/jwisniewski/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-02-19T22:04:28Z","updated_at":"2015-02-19T22:44:31Z","closed_at":"2015-02-19T22:44:31Z","author_association":"CONTRIBUTOR","body":"AndroidGraphics.createGLSurfaceView, line near: 131\n`if (sdkVersion <= 10 && config.useGLSurfaceView20API18) {\n    GLSurfaceView20API18 view = new GLSurfaceView20API18(application.getContext(), resolutionStrategy);`\n\nShouldn't be `sdkVersion >= 18 && config.useGLSurfaceView20API18`? I think we don't need API18 implementation of surface view on device with sdk version <= 10:) \n\nMoreover, if I understand this piece of code correctly and if currently everything work well, it seems we don't need GLSurfaceView20API18 at all, currently it is not used. Am I correct?\n\nlibGDX version: up to 1.5.4\nAffected classes: AndroidGraphics, AndroidGraphicsLiveWallpaper\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2862/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2861","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2861/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2861/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2861/events","html_url":"https://github.com/libgdx/libgdx/issues/2861","id":58229441,"number":2861,"title":"FileHandleResolver for model asset loaders","user":{"login":"mk1x86","id":4849383,"avatar_url":"https://avatars2.githubusercontent.com/u/4849383?v=4","gravatar_id":"","url":"https://api.github.com/users/mk1x86","html_url":"https://github.com/mk1x86","followers_url":"https://api.github.com/users/mk1x86/followers","following_url":"https://api.github.com/users/mk1x86/following{/other_user}","gists_url":"https://api.github.com/users/mk1x86/gists{/gist_id}","starred_url":"https://api.github.com/users/mk1x86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mk1x86/subscriptions","organizations_url":"https://api.github.com/users/mk1x86/orgs","repos_url":"https://api.github.com/users/mk1x86/repos","events_url":"https://api.github.com/users/mk1x86/events{/privacy}","received_events_url":"https://api.github.com/users/mk1x86/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-02-19T16:15:26Z","updated_at":"2015-03-12T07:21:09Z","closed_at":"2015-03-11T19:05:43Z","author_association":"NONE","body":"The G3dModelLoaders use JsonReader/UBJsonReader. I wrote my own FileHandleResolver and now the Modelloaders search in the wrong place. I guess the json readers need the resolvers as well? At least they get files passed to in the loader and look at the wrong place.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2861/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2860","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2860/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2860/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2860/events","html_url":"https://github.com/libgdx/libgdx/issues/2860","id":58176024,"number":2860,"title":"Sound doesn't loop on Android","user":{"login":"arg0d","id":6604420,"avatar_url":"https://avatars1.githubusercontent.com/u/6604420?v=4","gravatar_id":"","url":"https://api.github.com/users/arg0d","html_url":"https://github.com/arg0d","followers_url":"https://api.github.com/users/arg0d/followers","following_url":"https://api.github.com/users/arg0d/following{/other_user}","gists_url":"https://api.github.com/users/arg0d/gists{/gist_id}","starred_url":"https://api.github.com/users/arg0d/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arg0d/subscriptions","organizations_url":"https://api.github.com/users/arg0d/orgs","repos_url":"https://api.github.com/users/arg0d/repos","events_url":"https://api.github.com/users/arg0d/events{/privacy}","received_events_url":"https://api.github.com/users/arg0d/received_events","type":"User","site_admin":false},"labels":[{"id":59604218,"url":"https://api.github.com/repos/libgdx/libgdx/labels/android","name":"android","color":"009800","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-02-19T07:26:11Z","updated_at":"2017-04-13T19:39:27Z","closed_at":"2017-04-13T19:39:26Z","author_association":"NONE","body":"Sound sound = Gdx.audio.newSound(\"Sounds/sound.wav\");\nlong soundId = sound.play();\nsound.setLooping(soundId, true);\n\nThis code works fine on desktop, but the sound doesn't loop on Android.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2859","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2859/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2859/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2859/events","html_url":"https://github.com/libgdx/libgdx/issues/2859","id":58169507,"number":2859,"title":"Sprite generation from TTF loaded via AssetManager is inconsistent across devices","user":{"login":"vlaz","id":11069270,"avatar_url":"https://avatars3.githubusercontent.com/u/11069270?v=4","gravatar_id":"","url":"https://api.github.com/users/vlaz","html_url":"https://github.com/vlaz","followers_url":"https://api.github.com/users/vlaz/followers","following_url":"https://api.github.com/users/vlaz/following{/other_user}","gists_url":"https://api.github.com/users/vlaz/gists{/gist_id}","starred_url":"https://api.github.com/users/vlaz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vlaz/subscriptions","organizations_url":"https://api.github.com/users/vlaz/orgs","repos_url":"https://api.github.com/users/vlaz/repos","events_url":"https://api.github.com/users/vlaz/events{/privacy}","received_events_url":"https://api.github.com/users/vlaz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2015-02-19T05:28:14Z","updated_at":"2015-02-24T13:31:36Z","closed_at":null,"author_association":"NONE","body":"This is my first post here, I apologize in advance if it stinks.\n\nI'm working on a resolution-independent game whereby I load graphics as vectors using TTFs and convert them to textures/sprites based on device requirements.  This was working flawlessly and consistently across all tested devices until I employed the AssetManager to load the fonts.  Now, glyph data appears to vary across devices and produces unexpected sprites.  Note, I've had no issues on desktop and drawing directly from the bitmap font is still working correctly.  However, I require rotation and tinting so as far as I know, I'm stuck with using sprites.\n\nI've provided all relevant code snippets below just to make sure I'm not doing anything incorrectly, as well as screenshots of the inconsistency.\n\nAssetLoader.load()\n\n``` java\nam                              = new AssetManager();\nFileHandleResolver resolver     = new InternalFileHandleResolver();\nam.setLoader(FreeTypeFontGenerator.class, new FreeTypeFontGeneratorLoader(resolver));\nam.setLoader(BitmapFont.class, \".ttf\", new FreetypeFontLoader(resolver));\n\nFreeTypeFontLoaderParameter p   = new FreeTypeFontLoaderParameter();\np.fontParameters.size           = (int) (Gdx.graphics.getHeight() / 10);\np.fontParameters.flip           = true;\np.fontParameters.minFilter      = TextureFilter.Linear;\np.fontParameters.characters     = \"PY023\";\n                                    // P down feather\n                                    // Y quill feather\n                                    // 0 full star, no outline\n                                    // 2 half star and outline\n                                    // 3 empty star, just outline\np.fontFileName                  = \"f.ttf\";\nam.load(\"f.ttf\", BitmapFont.class, p);\n```\n\nAssetLoader.loadProgress()\n\n``` java\nif(am.update()) {\n    f       = am.get(\"f.ttf\");\n    fQuill  = Utils.getGlyphSprite('Y', f);\n    fDown   = Utils.getGlyphSprite('P', f);\n    sFull   = Utils.getGlyphSprite('0', f);\n    sHalf   = Utils.getGlyphSprite('2', f);\n    sEmpty  = Utils.getGlyphSprite('3', f);\n}\nreturn am.getProgress();\n```\n\nUtils.getGlyphSprite(char ch, BitmapFont f)\n\n``` java\nGlyph g     = f.getData().getGlyph(ch);\nSprite s    = new Sprite(f.getRegion().getTexture(), g.srcX, g.srcY, g.width, g.height);\ns.flip(false, true);\ns.setOrigin(g.width / 2, g.height / 2);\nreturn s;\n```\n\nAs an example, here is the painting of just the star outlines.\n\nGameRenderer.paint()\n\n``` java\nspritebatch.draw(empty, loc.x - empty.getWidth() / 2, loc.y - empty.getHeight() / 2, empty.getOriginX(), empty.getOriginY(), empty.getWidth(), empty.getHeight(), scale.current, scale.current, rotation.current + 90);\n```\n\nThis is the expected result, observed on desktop and a Nexus 4, Android 5.0.1.\n![screenshot_2015-02-18-17-27-30clip](https://cloud.githubusercontent.com/assets/11069270/6262172/0ad54e30-b7cc-11e4-8f93-a9adf8f0f1a4.png)\n\nThis is a garbled result, observed on an HTC One S, Android 4.1.1; note the feathers in place of stars, though they're not correctly drawn either, the framing seems to be off a bit.\n![screenshot_2015-02-18-22-38-27clip](https://cloud.githubusercontent.com/assets/11069270/6262175/0f7bddaa-b7cc-11e4-884b-d9066069ef1f.png)\n\nThe Nexus 4 isn't entirely perfect either, it had garbled results too via the AssetManager until I started loading the font in sections.  Desktop has always been perfect though, which is why I think this is more likely a bug in LibGDX than in my code.\n\nPlease let me know if there is any other information I can provide.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2858","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2858/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2858/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2858/events","html_url":"https://github.com/libgdx/libgdx/pull/2858","id":58155936,"number":2858,"title":"update from original","user":{"login":"xpenatan","id":6472084,"avatar_url":"https://avatars3.githubusercontent.com/u/6472084?v=4","gravatar_id":"","url":"https://api.github.com/users/xpenatan","html_url":"https://github.com/xpenatan","followers_url":"https://api.github.com/users/xpenatan/followers","following_url":"https://api.github.com/users/xpenatan/following{/other_user}","gists_url":"https://api.github.com/users/xpenatan/gists{/gist_id}","starred_url":"https://api.github.com/users/xpenatan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xpenatan/subscriptions","organizations_url":"https://api.github.com/users/xpenatan/orgs","repos_url":"https://api.github.com/users/xpenatan/repos","events_url":"https://api.github.com/users/xpenatan/events{/privacy}","received_events_url":"https://api.github.com/users/xpenatan/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-19T01:23:01Z","updated_at":"2015-02-19T01:25:03Z","closed_at":"2015-02-19T01:23:34Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2858","html_url":"https://github.com/libgdx/libgdx/pull/2858","diff_url":"https://github.com/libgdx/libgdx/pull/2858.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2858.patch"},"body":"","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2858/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2857","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2857/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2857/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2857/events","html_url":"https://github.com/libgdx/libgdx/pull/2857","id":58085406,"number":2857,"title":"Tween - Interpolation Helper","user":{"login":"davcri","id":6860637,"avatar_url":"https://avatars2.githubusercontent.com/u/6860637?v=4","gravatar_id":"","url":"https://api.github.com/users/davcri","html_url":"https://github.com/davcri","followers_url":"https://api.github.com/users/davcri/followers","following_url":"https://api.github.com/users/davcri/following{/other_user}","gists_url":"https://api.github.com/users/davcri/gists{/gist_id}","starred_url":"https://api.github.com/users/davcri/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davcri/subscriptions","organizations_url":"https://api.github.com/users/davcri/orgs","repos_url":"https://api.github.com/users/davcri/repos","events_url":"https://api.github.com/users/davcri/events{/privacy}","received_events_url":"https://api.github.com/users/davcri/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":17,"created_at":"2015-02-18T15:51:16Z","updated_at":"2015-02-21T11:53:28Z","closed_at":"2015-02-21T11:53:28Z","author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2857","html_url":"https://github.com/libgdx/libgdx/pull/2857","diff_url":"https://github.com/libgdx/libgdx/pull/2857.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2857.patch"},"body":"I created the `Tween` class in the _gdx.utils_ package. This class it's a sort of helper classes for libGDX's [Interpolation](https://github.com/libgdx/libgdx/wiki/Interpolation) ([code](https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/math/Interpolation.java)) class. It uses it's functions, adding a simple API for programmers.\n\nI also created a simple test for this class called `TweenTest`, I don't know if it is necessary to include it in this pull request, but it can be useful to understand what Tween is and how it works.\n\n**License**: Apache v2.0\n**Code formatting**: I used the eclipse formatter\n**CLA**: I haven't signed the CLA yet, I'll do that if necessary.\n\n---\n\nI posted also [on the forum](http://www.badlogicgames.com/forum/viewtopic.php?f=17&t=18400&sid=e8f6a8c7829cc5f4f7ae90e2ef10d757) where there is some information that I'll report here: \n\nSpeaking with the guys on the IRC I ended up with few doubts: \n\n**Q**: This code should be in the Interpolation class.\nI prefer to mantain the things separate, but I don't know much about the libGDX conventions. So tell me what you think.\n\n**Q**: Universal Tween Engine has much more features. \nYes but I prefer to have a simple and Object Oriented approach, that is also integrated with libGDX. Other features may be added in future.\n\n**Q**: Is \"Tween\" the correct name for this?\nI don't really know :D There are many terms that are used for these things: easing, tween, interpolation. For me it's just equations and an API to handle them, moreover I'm Italian and I don't know about the use of these terms in the common language.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2857/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2856","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2856/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2856/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2856/events","html_url":"https://github.com/libgdx/libgdx/pull/2856","id":58007736,"number":2856,"title":"Expose clearListeners method on ControllerManager","user":{"login":"nfantone","id":476069,"avatar_url":"https://avatars3.githubusercontent.com/u/476069?v=4","gravatar_id":"","url":"https://api.github.com/users/nfantone","html_url":"https://github.com/nfantone","followers_url":"https://api.github.com/users/nfantone/followers","following_url":"https://api.github.com/users/nfantone/following{/other_user}","gists_url":"https://api.github.com/users/nfantone/gists{/gist_id}","starred_url":"https://api.github.com/users/nfantone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nfantone/subscriptions","organizations_url":"https://api.github.com/users/nfantone/orgs","repos_url":"https://api.github.com/users/nfantone/repos","events_url":"https://api.github.com/users/nfantone/events{/privacy}","received_events_url":"https://api.github.com/users/nfantone/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2015-02-18T00:47:52Z","updated_at":"2015-02-18T17:27:14Z","closed_at":"2015-02-18T17:24:01Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2856","html_url":"https://github.com/libgdx/libgdx/pull/2856","diff_url":"https://github.com/libgdx/libgdx/pull/2856.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2856.patch"},"body":"Currently, the only way of removing a previously added `ControllerListener` is by **holding a reference** to that instance. More often than not that is either impractical or, having it accessible, implies a violation of the architecture or forces to bend classes' responsibilities.\n\nI have noticed that the `ControllerManager` interface defines a `clearListeners` method, which is the only one not accessible through a static method on the `Controllers` class. Was there a reason why this one was left behind?\n\nHaving this publicly accessible would be pretty handy.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2856/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2855","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2855/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2855/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2855/events","html_url":"https://github.com/libgdx/libgdx/issues/2855","id":57979039,"number":2855,"title":"allow creating AssetManager without default loaders","user":{"login":"FyiurAmron","id":11016998,"avatar_url":"https://avatars1.githubusercontent.com/u/11016998?v=4","gravatar_id":"","url":"https://api.github.com/users/FyiurAmron","html_url":"https://github.com/FyiurAmron","followers_url":"https://api.github.com/users/FyiurAmron/followers","following_url":"https://api.github.com/users/FyiurAmron/following{/other_user}","gists_url":"https://api.github.com/users/FyiurAmron/gists{/gist_id}","starred_url":"https://api.github.com/users/FyiurAmron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FyiurAmron/subscriptions","organizations_url":"https://api.github.com/users/FyiurAmron/orgs","repos_url":"https://api.github.com/users/FyiurAmron/repos","events_url":"https://api.github.com/users/FyiurAmron/events{/privacy}","received_events_url":"https://api.github.com/users/FyiurAmron/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-02-17T20:41:31Z","updated_at":"2015-10-03T20:23:13Z","closed_at":"2015-10-03T20:21:28Z","author_association":"CONTRIBUTOR","body":"currently both of the base class constructors available forcibly set the loaders, as a result API doesn't allow any way of creating AssetManager without the default set of loaders.\n\nproposed solution:\n\n``` java\n    /** Creates a new AssetManager with all default loaders. */\n    public AssetManager () {\n        this(new InternalFileHandleResolver());\n    }\n\n    /** Creates a new AssetManager with with all or no default loaders. */\n    public AssetManager (boolean setDefaultLoaders) {\n        if ( setDefaultLoaders )\n            setDefaultLoaders(new InternalFileHandleResolver());\n        executor = new AsyncExecutor(1);\n    }\n\n    /** Creates a new AssetManager with all default loaders. */\n    public AssetManager (FileHandleResolver resolver) {\n        setDefaultLoaders(resolver);\n        executor = new AsyncExecutor(1);\n    }\n\n    private void setDefaultLoaders (FileHandleResolver resolver) {\n        setLoader(BitmapFont.class, new BitmapFontLoader(resolver));\n        setLoader(Music.class, new MusicLoader(resolver));\n        setLoader(Pixmap.class, new PixmapLoader(resolver));\n        setLoader(Sound.class, new SoundLoader(resolver));\n        setLoader(TextureAtlas.class, new TextureAtlasLoader(resolver));\n        setLoader(Texture.class, new TextureLoader(resolver));\n        setLoader(Skin.class, new SkinLoader(resolver));\n        setLoader(ParticleEffect.class, new ParticleEffectLoader(resolver));\n        setLoader(PolygonRegion.class, new PolygonRegionLoader(resolver));\n        setLoader(I18NBundle.class, new I18NBundleLoader(resolver));\n        setLoader(Model.class, \".g3dj\", new G3dModelLoader(new JsonReader(), resolver));\n        setLoader(Model.class, \".g3db\", new G3dModelLoader(new UBJsonReader(), resolver));\n        setLoader(Model.class, \".obj\", new ObjLoader(resolver));\n    }\n```\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2854","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2854/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2854/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2854/events","html_url":"https://github.com/libgdx/libgdx/issues/2854","id":57898237,"number":2854,"title":" ParticleEmitter PremultipliedAlpha","user":{"login":"vuongthanhtai","id":5350927,"avatar_url":"https://avatars1.githubusercontent.com/u/5350927?v=4","gravatar_id":"","url":"https://api.github.com/users/vuongthanhtai","html_url":"https://github.com/vuongthanhtai","followers_url":"https://api.github.com/users/vuongthanhtai/followers","following_url":"https://api.github.com/users/vuongthanhtai/following{/other_user}","gists_url":"https://api.github.com/users/vuongthanhtai/gists{/gist_id}","starred_url":"https://api.github.com/users/vuongthanhtai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vuongthanhtai/subscriptions","organizations_url":"https://api.github.com/users/vuongthanhtai/orgs","repos_url":"https://api.github.com/users/vuongthanhtai/repos","events_url":"https://api.github.com/users/vuongthanhtai/events{/privacy}","received_events_url":"https://api.github.com/users/vuongthanhtai/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-17T08:54:10Z","updated_at":"2015-02-19T03:38:18Z","closed_at":"2015-02-19T03:38:18Z","author_association":"NONE","body":"You forgot a line of code right?\nLine 126\nlibgdx / GDX / src / com / badlogic / GDX / graphics / g2d / ParticleEmitter.java\npremultipliedAlpha = emitter.premultipliedAlpha;\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2853","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2853/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2853/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2853/events","html_url":"https://github.com/libgdx/libgdx/pull/2853","id":57871873,"number":2853,"title":"Added reverse iteration from tail of PooledLinkedList","user":{"login":"mickmuzac","id":1824241,"avatar_url":"https://avatars0.githubusercontent.com/u/1824241?v=4","gravatar_id":"","url":"https://api.github.com/users/mickmuzac","html_url":"https://github.com/mickmuzac","followers_url":"https://api.github.com/users/mickmuzac/followers","following_url":"https://api.github.com/users/mickmuzac/following{/other_user}","gists_url":"https://api.github.com/users/mickmuzac/gists{/gist_id}","starred_url":"https://api.github.com/users/mickmuzac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mickmuzac/subscriptions","organizations_url":"https://api.github.com/users/mickmuzac/orgs","repos_url":"https://api.github.com/users/mickmuzac/repos","events_url":"https://api.github.com/users/mickmuzac/events{/privacy}","received_events_url":"https://api.github.com/users/mickmuzac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-17T01:18:32Z","updated_at":"2015-02-17T18:02:31Z","closed_at":"2015-02-17T18:02:31Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2853","html_url":"https://github.com/libgdx/libgdx/pull/2853","diff_url":"https://github.com/libgdx/libgdx/pull/2853.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2853.patch"},"body":"This PR addresses issue #2824.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2853/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2852","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2852/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2852/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2852/events","html_url":"https://github.com/libgdx/libgdx/pull/2852","id":57733761,"number":2852,"title":"Cache colour float for ShapeRenderer","user":{"login":"Tom-Ski","id":4346114,"avatar_url":"https://avatars0.githubusercontent.com/u/4346114?v=4","gravatar_id":"","url":"https://api.github.com/users/Tom-Ski","html_url":"https://github.com/Tom-Ski","followers_url":"https://api.github.com/users/Tom-Ski/followers","following_url":"https://api.github.com/users/Tom-Ski/following{/other_user}","gists_url":"https://api.github.com/users/Tom-Ski/gists{/gist_id}","starred_url":"https://api.github.com/users/Tom-Ski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tom-Ski/subscriptions","organizations_url":"https://api.github.com/users/Tom-Ski/orgs","repos_url":"https://api.github.com/users/Tom-Ski/repos","events_url":"https://api.github.com/users/Tom-Ski/events{/privacy}","received_events_url":"https://api.github.com/users/Tom-Ski/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-02-15T15:26:12Z","updated_at":"2015-02-15T16:04:51Z","closed_at":"2015-02-15T16:04:51Z","author_association":"OWNER","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2852","html_url":"https://github.com/libgdx/libgdx/pull/2852","diff_url":"https://github.com/libgdx/libgdx/pull/2852.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2852.patch"},"body":"- Adds `color (float)` to ImmediateModeRenderer inteface and implements\n- Optimizes ShapeRenderer methods with cached colour float. \n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2851","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2851/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2851/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2851/events","html_url":"https://github.com/libgdx/libgdx/issues/2851","id":57732222,"number":2851,"title":"allow freeing Cell's without recreating the whole Table","user":{"login":"FyiurAmron","id":11016998,"avatar_url":"https://avatars1.githubusercontent.com/u/11016998?v=4","gravatar_id":"","url":"https://api.github.com/users/FyiurAmron","html_url":"https://github.com/FyiurAmron","followers_url":"https://api.github.com/users/FyiurAmron/followers","following_url":"https://api.github.com/users/FyiurAmron/following{/other_user}","gists_url":"https://api.github.com/users/FyiurAmron/gists{/gist_id}","starred_url":"https://api.github.com/users/FyiurAmron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FyiurAmron/subscriptions","organizations_url":"https://api.github.com/users/FyiurAmron/orgs","repos_url":"https://api.github.com/users/FyiurAmron/repos","events_url":"https://api.github.com/users/FyiurAmron/events{/privacy}","received_events_url":"https://api.github.com/users/FyiurAmron/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-15T14:38:03Z","updated_at":"2015-02-15T19:48:42Z","closed_at":"2015-02-15T19:48:42Z","author_association":"CONTRIBUTOR","body":"Currently, the following code for updating the layout of an actor in a table:\n\n``` java\n//while(true) {\n actor.remove();\n table.add( actor );\n//} // uncomment to get a \"WTF\"\n```\n\ncauses a memory leak (and/or a CPU leak on `layout()` calls if the outer loop is timed by `create()`) due to fact that adding an Actor to the Table obtain()s a new Cell, but removing that Actor keeps the Cell in layout. While this is probably intentional, there still ain't any way short of subclassing for removing the no-longer-needed Cells from the Table.\n\nI am aware the Cell's can be reused - yet in some cases (changing the amount of actually used Cell etc) this is quite tedious to keep track of the objects & manage the pool by yourself, when it should have probably be the responsibility of the Table object.\n\nAs to the idea that the Table and it's layout is inherently static/immutable after creation: it ain't. Calling `layout()` easily allows to update the layout of the mutated Table - OTOH, it currently can't be used due to aforementioned memory leak.\n\nA possible solution would be, e.g., to add a following (or similar) method to the Table.java,\n\n``` java\n    public boolean removeActorCell( Actor actor ) {\n        if ( !super.removeActor( actor ) ) {\n            return false;\n        }\n        TableExCell cell = getCell( actor );\n        if ( cell != null ) {\n            cellPool.free( cell );\n        }\n        return true;\n    }\n```\n\nand the valid code would be then, simply\n\n``` java\n//while(true) {\n table.removeActorCell( actor );\n table.add( actor );\n//} // no leak here\n```\n\nNote that implementing that behaviour that is currently impossible by normal subclassing due to cellPool being package-private etc.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2851/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2850","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2850/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2850/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2850/events","html_url":"https://github.com/libgdx/libgdx/issues/2850","id":57707108,"number":2850,"title":"TextureWrap.Repeat works only for power of two textures","user":{"login":"ghost","id":10137,"avatar_url":"https://avatars3.githubusercontent.com/u/10137?v=4","gravatar_id":"","url":"https://api.github.com/users/ghost","html_url":"https://github.com/ghost","followers_url":"https://api.github.com/users/ghost/followers","following_url":"https://api.github.com/users/ghost/following{/other_user}","gists_url":"https://api.github.com/users/ghost/gists{/gist_id}","starred_url":"https://api.github.com/users/ghost/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ghost/subscriptions","organizations_url":"https://api.github.com/users/ghost/orgs","repos_url":"https://api.github.com/users/ghost/repos","events_url":"https://api.github.com/users/ghost/events{/privacy}","received_events_url":"https://api.github.com/users/ghost/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-14T21:26:58Z","updated_at":"2015-02-15T16:12:19Z","closed_at":"2015-02-15T16:12:19Z","author_association":"NONE","body":"On desktop it works on NPOT textures, but on android it doesn't.\nI don't know how it works on other platforms.\nI think that it should be put somewhere in documentation, because it's confusing (it is kind of hard to work that out).\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2850/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2849","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2849/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2849/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2849/events","html_url":"https://github.com/libgdx/libgdx/pull/2849","id":57702874,"number":2849,"title":"Fix for Issue #2847","user":{"login":"nooone","id":5896510,"avatar_url":"https://avatars3.githubusercontent.com/u/5896510?v=4","gravatar_id":"","url":"https://api.github.com/users/nooone","html_url":"https://github.com/nooone","followers_url":"https://api.github.com/users/nooone/followers","following_url":"https://api.github.com/users/nooone/following{/other_user}","gists_url":"https://api.github.com/users/nooone/gists{/gist_id}","starred_url":"https://api.github.com/users/nooone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nooone/subscriptions","organizations_url":"https://api.github.com/users/nooone/orgs","repos_url":"https://api.github.com/users/nooone/repos","events_url":"https://api.github.com/users/nooone/events{/privacy}","received_events_url":"https://api.github.com/users/nooone/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-02-14T19:02:04Z","updated_at":"2015-02-19T01:16:02Z","closed_at":"2015-02-19T01:16:02Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2849","html_url":"https://github.com/libgdx/libgdx/pull/2849","diff_url":"https://github.com/libgdx/libgdx/pull/2849.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2849.patch"},"body":"I have replaced the lock with synchronized methods. Fixes https://github.com/libgdx/libgdx/issues/2847\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2848","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2848/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2848/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2848/events","html_url":"https://github.com/libgdx/libgdx/issues/2848","id":57700133,"number":2848,"title":"BitmapFont.markupEnabled not read from skin json file","user":{"login":"guillaume-alvarez","id":7364145,"avatar_url":"https://avatars1.githubusercontent.com/u/7364145?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-alvarez","html_url":"https://github.com/guillaume-alvarez","followers_url":"https://api.github.com/users/guillaume-alvarez/followers","following_url":"https://api.github.com/users/guillaume-alvarez/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-alvarez/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-alvarez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-alvarez/subscriptions","organizations_url":"https://api.github.com/users/guillaume-alvarez/orgs","repos_url":"https://api.github.com/users/guillaume-alvarez/repos","events_url":"https://api.github.com/users/guillaume-alvarez/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-alvarez/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-14T17:35:17Z","updated_at":"2015-02-17T15:57:58Z","closed_at":"2015-02-17T15:57:13Z","author_association":"CONTRIBUTOR","body":"In my project I want some labels only to accept the color markup format (not to both with it when not required). So I defined a specific `BitmapFont` to be used in a specific `LabelStyle`:\n\n```\n    com.badlogic.gdx.graphics.g2d.BitmapFont: {\n        default-font: { file: irisUPC.fnt },\n        // setting markupEnabled does not work here\n        colored-font: { file: irisUPC.fnt, markupEnabled: true },\n    },\n```\n\nThe issue is `markupEnabled: true` is ignored.\n\nIt guess the issue happens because in `Skin` class the json<->`BitmapFont` serializer is replaced by a specific one that reads a few some hard-coded fields. Would it be possible to keep usual serializer behavior for other fields such as markupEnabled?\n\nI encountered the issue only with markupEnabled but it could also happen to other future fields.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2847","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2847/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2847/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2847/events","html_url":"https://github.com/libgdx/libgdx/issues/2847","id":57699464,"number":2847,"title":"Locking conflict when sending multiple HttpRequests","user":{"login":"nooone","id":5896510,"avatar_url":"https://avatars3.githubusercontent.com/u/5896510?v=4","gravatar_id":"","url":"https://api.github.com/users/nooone","html_url":"https://github.com/nooone","followers_url":"https://api.github.com/users/nooone/followers","following_url":"https://api.github.com/users/nooone/following{/other_user}","gists_url":"https://api.github.com/users/nooone/gists{/gist_id}","starred_url":"https://api.github.com/users/nooone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nooone/subscriptions","organizations_url":"https://api.github.com/users/nooone/orgs","repos_url":"https://api.github.com/users/nooone/repos","events_url":"https://api.github.com/users/nooone/events{/privacy}","received_events_url":"https://api.github.com/users/nooone/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-14T17:16:32Z","updated_at":"2015-02-19T01:16:02Z","closed_at":"2015-02-19T01:16:02Z","author_association":"CONTRIBUTOR","body":"Using LibGDX 1.5.4, sending multiple `HttpRequests` quickly after one another _may_ result in the following Exception. It happens on Android and Desktop.\n\n```\njava.lang.IllegalMonitorStateException\n    at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:122)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1238)\n    at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:428)\n    at com.badlogic.gdx.net.NetJavaImpl$1.run(NetJavaImpl.java:208)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:422)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:237)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n    at java.lang.Thread.run(Thread.java:818)\n```\n\n[This PR](https://github.com/libgdx/libgdx/pull/2771) fixing [this issue](https://github.com/libgdx/libgdx/issues/2656) seems to be responsible for this new behaviour. The problem seems to be that each sent request results in a new Thread. These threads use the same lock in a conflicting way.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2846","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2846/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2846/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2846/events","html_url":"https://github.com/libgdx/libgdx/pull/2846","id":57694920,"number":2846,"title":"Fixed a NPE in HttpResponse.getResultAsString()","user":{"login":"nooone","id":5896510,"avatar_url":"https://avatars3.githubusercontent.com/u/5896510?v=4","gravatar_id":"","url":"https://api.github.com/users/nooone","html_url":"https://github.com/nooone","followers_url":"https://api.github.com/users/nooone/followers","following_url":"https://api.github.com/users/nooone/following{/other_user}","gists_url":"https://api.github.com/users/nooone/gists{/gist_id}","starred_url":"https://api.github.com/users/nooone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nooone/subscriptions","organizations_url":"https://api.github.com/users/nooone/orgs","repos_url":"https://api.github.com/users/nooone/repos","events_url":"https://api.github.com/users/nooone/events{/privacy}","received_events_url":"https://api.github.com/users/nooone/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-02-14T14:37:57Z","updated_at":"2015-02-14T14:39:08Z","closed_at":"2015-02-14T14:39:08Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2846","html_url":"https://github.com/libgdx/libgdx/pull/2846","diff_url":"https://github.com/libgdx/libgdx/pull/2846.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2846.patch"},"body":"In case a HttpResponse does not contain any content, using `HttpResponse.getResultAsString()` will result in a NullPointerException:\n\n```\njava.lang.NullPointerException\n    at java.io.Reader.<init>(Reader.java:78)\n    at java.io.InputStreamReader.<init>(InputStreamReader.java:72)\n    at com.badlogic.gdx.utils.StreamUtils.copyStreamToString(StreamUtils.java:74)\n    at com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse.getResultAsString(NetJavaImpl.java:75)\n```\n\nThis PR adds a nullcheck to `HttpResponse.getResultAsString()` and returns `\"\"` instead.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2845","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2845/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2845/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2845/events","html_url":"https://github.com/libgdx/libgdx/issues/2845","id":57692197,"number":2845,"title":"Update to GWT 2.7.0","user":{"login":"badlogic","id":514052,"avatar_url":"https://avatars1.githubusercontent.com/u/514052?v=4","gravatar_id":"","url":"https://api.github.com/users/badlogic","html_url":"https://github.com/badlogic","followers_url":"https://api.github.com/users/badlogic/followers","following_url":"https://api.github.com/users/badlogic/following{/other_user}","gists_url":"https://api.github.com/users/badlogic/gists{/gist_id}","starred_url":"https://api.github.com/users/badlogic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/badlogic/subscriptions","organizations_url":"https://api.github.com/users/badlogic/orgs","repos_url":"https://api.github.com/users/badlogic/repos","events_url":"https://api.github.com/users/badlogic/events{/privacy}","received_events_url":"https://api.github.com/users/badlogic/received_events","type":"User","site_admin":false},"labels":[{"id":11336982,"url":"https://api.github.com/repos/libgdx/libgdx/labels/enhancement","name":"enhancement","color":"84b6eb","default":true},{"id":67383148,"url":"https://api.github.com/repos/libgdx/libgdx/labels/gwt","name":"gwt","color":"5319e7","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2015-02-14T12:55:05Z","updated_at":"2017-01-11T16:20:27Z","closed_at":"2017-01-11T16:20:27Z","author_association":"OWNER","body":"","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2845/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2844","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2844/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2844/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2844/events","html_url":"https://github.com/libgdx/libgdx/pull/2844","id":57690152,"number":2844,"title":"IntelliJ code inspection: avoid false warnings.","user":{"login":"code-disaster","id":4644167,"avatar_url":"https://avatars1.githubusercontent.com/u/4644167?v=4","gravatar_id":"","url":"https://api.github.com/users/code-disaster","html_url":"https://github.com/code-disaster","followers_url":"https://api.github.com/users/code-disaster/followers","following_url":"https://api.github.com/users/code-disaster/following{/other_user}","gists_url":"https://api.github.com/users/code-disaster/gists{/gist_id}","starred_url":"https://api.github.com/users/code-disaster/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code-disaster/subscriptions","organizations_url":"https://api.github.com/users/code-disaster/orgs","repos_url":"https://api.github.com/users/code-disaster/repos","events_url":"https://api.github.com/users/code-disaster/events{/privacy}","received_events_url":"https://api.github.com/users/code-disaster/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-14T11:23:48Z","updated_at":"2015-02-19T19:14:30Z","closed_at":"2015-02-14T12:18:22Z","author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2844","html_url":"https://github.com/libgdx/libgdx/pull/2844","diff_url":"https://github.com/libgdx/libgdx/pull/2844.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2844.patch"},"body":"This PR doesn't change any code behaviour.\n\nMotivation: I'm using IntelliJ, and I'm rather pedantic regarding code inspection warnings, especially if they are \"live\" (always active, shown as yellow marker in editor). The warning itself can be very helpful to catch typos, but this PR removes false warnings created by code such as:\n\n```\nint y = MathUtils.floor(bounds.min.y);\n```\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2843","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2843/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2843/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2843/events","html_url":"https://github.com/libgdx/libgdx/pull/2843","id":57679576,"number":2843,"title":"Changed TiledMapTileSets.getTileSet to backwards iterate","user":{"login":"psiegel","id":2452274,"avatar_url":"https://avatars3.githubusercontent.com/u/2452274?v=4","gravatar_id":"","url":"https://api.github.com/users/psiegel","html_url":"https://github.com/psiegel","followers_url":"https://api.github.com/users/psiegel/followers","following_url":"https://api.github.com/users/psiegel/following{/other_user}","gists_url":"https://api.github.com/users/psiegel/gists{/gist_id}","starred_url":"https://api.github.com/users/psiegel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psiegel/subscriptions","organizations_url":"https://api.github.com/users/psiegel/orgs","repos_url":"https://api.github.com/users/psiegel/repos","events_url":"https://api.github.com/users/psiegel/events{/privacy}","received_events_url":"https://api.github.com/users/psiegel/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-14T03:41:12Z","updated_at":"2015-02-14T03:50:26Z","closed_at":"2015-02-14T03:50:26Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2843","html_url":"https://github.com/libgdx/libgdx/pull/2843","diff_url":"https://github.com/libgdx/libgdx/pull/2843.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2843.patch"},"body":"This allows better backwards compatibility with older maps created with a shared external tileset should the image of that tileset be later expanded.  Backwards iteration prefers earlier versions of conflicting gids in this case.  Includes test to illustrate the above issue.\n\nClean-up of closed pull request: https://github.com/libgdx/libgdx/pull/2837\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2843/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2842","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2842/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2842/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2842/events","html_url":"https://github.com/libgdx/libgdx/pull/2842","id":57679407,"number":2842,"title":"Tiled fix","user":{"login":"psiegel","id":2452274,"avatar_url":"https://avatars3.githubusercontent.com/u/2452274?v=4","gravatar_id":"","url":"https://api.github.com/users/psiegel","html_url":"https://github.com/psiegel","followers_url":"https://api.github.com/users/psiegel/followers","following_url":"https://api.github.com/users/psiegel/following{/other_user}","gists_url":"https://api.github.com/users/psiegel/gists{/gist_id}","starred_url":"https://api.github.com/users/psiegel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psiegel/subscriptions","organizations_url":"https://api.github.com/users/psiegel/orgs","repos_url":"https://api.github.com/users/psiegel/repos","events_url":"https://api.github.com/users/psiegel/events{/privacy}","received_events_url":"https://api.github.com/users/psiegel/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-14T03:34:18Z","updated_at":"2015-02-14T03:34:33Z","closed_at":"2015-02-14T03:34:29Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2842","html_url":"https://github.com/libgdx/libgdx/pull/2842","diff_url":"https://github.com/libgdx/libgdx/pull/2842.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2842.patch"},"body":"","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2841","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2841/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2841/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2841/events","html_url":"https://github.com/libgdx/libgdx/pull/2841","id":57665313,"number":2841,"title":"set mouse cursor using a Cursor object","user":{"login":"haedri","id":1549712,"avatar_url":"https://avatars3.githubusercontent.com/u/1549712?v=4","gravatar_id":"","url":"https://api.github.com/users/haedri","html_url":"https://github.com/haedri","followers_url":"https://api.github.com/users/haedri/followers","following_url":"https://api.github.com/users/haedri/following{/other_user}","gists_url":"https://api.github.com/users/haedri/gists{/gist_id}","starred_url":"https://api.github.com/users/haedri/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haedri/subscriptions","organizations_url":"https://api.github.com/users/haedri/orgs","repos_url":"https://api.github.com/users/haedri/repos","events_url":"https://api.github.com/users/haedri/events{/privacy}","received_events_url":"https://api.github.com/users/haedri/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":25,"created_at":"2015-02-13T22:56:42Z","updated_at":"2015-09-01T08:20:15Z","closed_at":"2015-09-01T08:15:14Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2841","html_url":"https://github.com/libgdx/libgdx/pull/2841","diff_url":"https://github.com/libgdx/libgdx/pull/2841.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2841.patch"},"body":"This pull request is to solve issue #2839\n\nBasically problem is that currently calling Gdx.input.setCursorImage will create a new (lwjgl) Cursor object everytime, even if pixmaps are identical + it will make some calculations to process the Pixmap.\nThis is ok if only a few setCursorImage call are made, but if the application requires to cycle a lot through a few cursors then it will eventually crash on Windows (invisible cursor) and also use unecessary memory + cpu.\n\nThis pull request adds a new Cursor object that can be created by calling Gdx.input.newCursor, and set anytime using Gdx.input.setCursor, when using this method no other object are created when calling Gdx.input.setCursor. It kinda provides a way for the user to use a cache for cursor creation.\n\nThis is my very first pull request (first time using commit, push and pull request actually) and my first contribution to Libgdx. So if I made anything wrong don't hesitate to tell me, I will do my best to correct this.\n\nThere are two things I am not sure about:\n1- I kept the old Gdx.input.setCursorImage for compatibility reasons, it will call newCursor/setCursor, maybe it should be noted deprecated or something...\n2- The Gdx.input.setCursor method is not necessary as the Cursor object has a setCursor() function, I was thinking of removing it, but lept it to match current setCursorImage method and to provide an easy way to revert to default cursor (other way is to call newCursor with a null pixmap and use this cursor next). It's 50/50, so if you want me to remove it I can easily understand.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2840","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2840/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2840/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2840/events","html_url":"https://github.com/libgdx/libgdx/pull/2840","id":57526698,"number":2840,"title":"added alpha and premultiplied alpha config values to GWT backend","user":{"login":"C-Alexander","id":847406,"avatar_url":"https://avatars1.githubusercontent.com/u/847406?v=4","gravatar_id":"","url":"https://api.github.com/users/C-Alexander","html_url":"https://github.com/C-Alexander","followers_url":"https://api.github.com/users/C-Alexander/followers","following_url":"https://api.github.com/users/C-Alexander/following{/other_user}","gists_url":"https://api.github.com/users/C-Alexander/gists{/gist_id}","starred_url":"https://api.github.com/users/C-Alexander/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/C-Alexander/subscriptions","organizations_url":"https://api.github.com/users/C-Alexander/orgs","repos_url":"https://api.github.com/users/C-Alexander/repos","events_url":"https://api.github.com/users/C-Alexander/events{/privacy}","received_events_url":"https://api.github.com/users/C-Alexander/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-02-12T22:03:58Z","updated_at":"2015-02-13T03:28:52Z","closed_at":"2015-02-13T03:28:52Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2840","html_url":"https://github.com/libgdx/libgdx/pull/2840","diff_url":"https://github.com/libgdx/libgdx/pull/2840.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2840.patch"},"body":"Extremely minor, but I need the first for a small project and i've noted a few others asked about it over time too.\n\nThe first allows for showing the page behind the canvas, the second is just a different way of transparency. They still default to false, as they affect performance, but with this we have the option if we need them. \n\nI understand HTML5 isn't exactly the chief target of LibGDX, but I for one would like to do some fancy background things in the HTML5 side of my game :)\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2839","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2839/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2839/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2839/events","html_url":"https://github.com/libgdx/libgdx/issues/2839","id":57508106,"number":2839,"title":"Cursor randomly disappear when using Gdx.input.setCursorImage on desktop/Windows","user":{"login":"haedri","id":1549712,"avatar_url":"https://avatars3.githubusercontent.com/u/1549712?v=4","gravatar_id":"","url":"https://api.github.com/users/haedri","html_url":"https://github.com/haedri","followers_url":"https://api.github.com/users/haedri/followers","following_url":"https://api.github.com/users/haedri/following{/other_user}","gists_url":"https://api.github.com/users/haedri/gists{/gist_id}","starred_url":"https://api.github.com/users/haedri/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haedri/subscriptions","organizations_url":"https://api.github.com/users/haedri/orgs","repos_url":"https://api.github.com/users/haedri/repos","events_url":"https://api.github.com/users/haedri/events{/privacy}","received_events_url":"https://api.github.com/users/haedri/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-02-12T19:34:39Z","updated_at":"2015-11-04T04:30:37Z","closed_at":"2015-11-04T04:30:37Z","author_association":"CONTRIBUTOR","body":"When using Gdx.input.setCursorImage the cursor can randomly disappear forever (the application needs to be closed, another call to Gdx.input.setCursorImage doesn't solve the problem)\n\nIt doesn't seem to happen at all under my Linux environment, just under Windows\n\nTested on:\n- Windows 64bits, jre 8 64 bits : ko\n- Windows 64bits, jre 7 64 bits : ko\n- Ubuntu 64bits, jre 7 64 bits : ok\n\nTo reproduce create a new project (tested with LibGdx 1.5.2), and change the main class content to:\n\n```\nPixmap      pixmap  = null;\n\n@Override\npublic void create()\n{\n    pixmap = new Pixmap(32, 32, Format.RGBA8888);\n    pixmap.setColor(Color.GREEN);\n    pixmap.drawCircle(15, 15, 10);\n}\n\n@Override\npublic void render()\n{\n    Gdx.gl.glClearColor(1, 0, 0, 1);\n    Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n    for (int i = 0; i < 1000; i++)\n        Gdx.input.setCursorImage(pixmap, 16, 16);\n}\n```\n\nLaunch the application and just move the mouse around\nOf course this code is a bit overkill but this will force the bug to appear quite quickly (usually under 10 seconds on my test environement)\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2838","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2838/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2838/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2838/events","html_url":"https://github.com/libgdx/libgdx/pull/2838","id":57416566,"number":2838,"title":"Update freetype from version 2.4.10 to 2.5.5","user":{"login":"MobiDevelop","id":1095464,"avatar_url":"https://avatars2.githubusercontent.com/u/1095464?v=4","gravatar_id":"","url":"https://api.github.com/users/MobiDevelop","html_url":"https://github.com/MobiDevelop","followers_url":"https://api.github.com/users/MobiDevelop/followers","following_url":"https://api.github.com/users/MobiDevelop/following{/other_user}","gists_url":"https://api.github.com/users/MobiDevelop/gists{/gist_id}","starred_url":"https://api.github.com/users/MobiDevelop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MobiDevelop/subscriptions","organizations_url":"https://api.github.com/users/MobiDevelop/orgs","repos_url":"https://api.github.com/users/MobiDevelop/repos","events_url":"https://api.github.com/users/MobiDevelop/events{/privacy}","received_events_url":"https://api.github.com/users/MobiDevelop/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-02-12T04:39:08Z","updated_at":"2015-02-13T12:59:24Z","closed_at":"2015-02-13T12:59:24Z","author_association":"OWNER","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2838","html_url":"https://github.com/libgdx/libgdx/pull/2838","diff_url":"https://github.com/libgdx/libgdx/pull/2838.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2838.patch"},"body":"Long overdue update.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2838/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2837","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2837/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2837/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2837/events","html_url":"https://github.com/libgdx/libgdx/pull/2837","id":57328774,"number":2837,"title":"TiledMap rendering failing to respect firstgid value for multiple external tilesets","user":{"login":"psiegel","id":2452274,"avatar_url":"https://avatars3.githubusercontent.com/u/2452274?v=4","gravatar_id":"","url":"https://api.github.com/users/psiegel","html_url":"https://github.com/psiegel","followers_url":"https://api.github.com/users/psiegel/followers","following_url":"https://api.github.com/users/psiegel/following{/other_user}","gists_url":"https://api.github.com/users/psiegel/gists{/gist_id}","starred_url":"https://api.github.com/users/psiegel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psiegel/subscriptions","organizations_url":"https://api.github.com/users/psiegel/orgs","repos_url":"https://api.github.com/users/psiegel/repos","events_url":"https://api.github.com/users/psiegel/events{/privacy}","received_events_url":"https://api.github.com/users/psiegel/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2015-02-11T15:16:53Z","updated_at":"2017-01-16T14:43:46Z","closed_at":"2015-02-14T03:14:37Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2837","html_url":"https://github.com/libgdx/libgdx/pull/2837","diff_url":"https://github.com/libgdx/libgdx/pull/2837.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2837.patch"},"body":"I started looking into this when I noticed an odd difference between how the Tiled editor works vs. the libgdx renderer when an external tileset's image is changed out from under it. To expose this issue you must have multiple external tilesets listed and then expand the image of an existing tileset early in the list. The tiled editor continues to load the existing map just fine, though it will modify all gids after the expansion point on the next save. The libgdx renderer, however, will incorrectly render the newly added tiles instead of the pre-existing tiles in the later tileset.\n\nConsider the included test data in this pull request. Two copies of the same map are included. In the first, there are two external tilesets:\n\nEach tileset has exactly 1 tile, thus the firstgid of the first tileset is 1, and the second is 2. All tiles painted in the included tile layer are therefor values 1 or 2.\n\nThe second version references a modfied version of the first tileset, though is otherwise idenctical to the first:\n\nIn grass_extended.tsx, the image has been expanded to include 4 tiles, thus has tile IDs 1, 2, 3, and 4. However, water.tsx still indicates that it's firstgid is 2, thus we have two tilesets that both claim to have tile gid 2. The layer data is unchanged, and therefore expects tile gid 2 to refer to the first tile in the water.tsx tileset, not the second grass tile.\n\nThe fix changes how tiles are searched for by gid, reverse-iterating the tilesets under the assumption that they are in order of ascending firstgid. It then searches each tileset for specified tile only if the gid requested is greater than the firstgid value.\n\nAs an additional efficiency, I have recorded the firstgid value in the TiledMapTileSet object. I know this value is already included in the MapProperties, but I thought for a value referenced so frequently during a render loop it would be preferably to extract it into a member variable.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2836","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/2836/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/2836/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/2836/events","html_url":"https://github.com/libgdx/libgdx/pull/2836","id":57325863,"number":2836,"title":"TiledMap rendering failing to respect firstgid value for multiple external tilesets","user":{"login":"psiegeldb","id":10922878,"avatar_url":"https://avatars0.githubusercontent.com/u/10922878?v=4","gravatar_id":"","url":"https://api.github.com/users/psiegeldb","html_url":"https://github.com/psiegeldb","followers_url":"https://api.github.com/users/psiegeldb/followers","following_url":"https://api.github.com/users/psiegeldb/following{/other_user}","gists_url":"https://api.github.com/users/psiegeldb/gists{/gist_id}","starred_url":"https://api.github.com/users/psiegeldb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psiegeldb/subscriptions","organizations_url":"https://api.github.com/users/psiegeldb/orgs","repos_url":"https://api.github.com/users/psiegeldb/repos","events_url":"https://api.github.com/users/psiegeldb/events{/privacy}","received_events_url":"https://api.github.com/users/psiegeldb/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-02-11T14:56:22Z","updated_at":"2015-02-11T15:16:24Z","closed_at":"2015-02-11T15:15:17Z","author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/2836","html_url":"https://github.com/libgdx/libgdx/pull/2836","diff_url":"https://github.com/libgdx/libgdx/pull/2836.diff","patch_url":"https://github.com/libgdx/libgdx/pull/2836.patch"},"body":"I started looking into this when I noticed an odd difference between how the Tiled editor works vs. the libgdx renderer when an external tileset's image is changed out from under it.  To expose this issue you must have multiple external tilesets listed and then expand the image of an existing tileset early in the list.  The tiled editor continues to load the existing map just fine, though it will modify all gids after the expansion point on the next save.  The libgdx renderer, however, will incorrectly render the newly added tiles instead of the pre-existing tiles in the later tileset.\n\nConsider the included test data in this pull request.  Two copies of the same map are included.  In the first, there are two external tilesets:\n  <tileset firstgid=\"1\" source=\"grass.tsx\"/>\n  <tileset firstgid=\"2\" source=\"water.tsx\"/>\n\nEach tileset has exactly 1 tile, thus the firstgid of the first tileset is 1, and the second is 2.  All tiles painted in the included tile layer are therefor values 1 or 2.\n\nThe second version references a modfied version of the first tileset, though is otherwise idenctical to the first:\n  <tileset firstgid=\"1\" source=\"grass_extended.tsx\"/>\n  <tileset firstgid=\"2\" source=\"water.tsx\"/>\n\nIn grass_extended.tsx, the image has been expanded to include 4 tiles, thus has tile IDs 1, 2, 3, and 4.  However, water.tsx still indicates that it's firstgid is 2, thus we have two tilesets that both claim to have tile gid 2.  The layer data is unchanged, and therefore expects tile gid 2 to refer to the first tile in the water.tsx tileset, not the second grass tile.\n\nThe fix changes how tiles are searched for by gid, reverse-iterating the tilesets under the assumption that they are in order of ascending firstgid.  It then searches each tileset for specified tile only if the gid requested is greater than the firstgid value.\n\nAs an additional efficiency, I have recorded the firstgid value in the TiledMapTileSet object.  I know this value is already included in the MapProperties, but I thought for a value referenced so frequently during a render loop it would be preferably to extract it into a member variable.  \n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/2836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}}],"meta":{"x-ratelimit-limit":"5000","x-ratelimit-remaining":"4931","x-ratelimit-reset":"1506844633","x-github-request-id":"8D6C:028A:1AB4B77:2ECD953:59D0952C","x-github-media-type":"github.squirrel-girl-preview","link":"<https://api.github.com/repositories/5373551/issues?state=all&page=70>; rel=\"next\", <https://api.github.com/repositories/5373551/issues?state=all&page=164>; rel=\"last\", <https://api.github.com/repositories/5373551/issues?state=all&page=1>; rel=\"first\", <https://api.github.com/repositories/5373551/issues?state=all&page=68>; rel=\"prev\"","etag":"\"af2d0714ca0f164945c23ec60d6dd476\"","status":"200 OK"}}
