{"data":[{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3558","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3558/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3558/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3558/events","html_url":"https://github.com/libgdx/libgdx/issues/3558","id":116353091,"number":3558,"title":"ScrollPane#setScrollbarsOnTop does not work on not fade scrollbars","user":{"login":"yagodar","id":1713346,"avatar_url":"https://avatars1.githubusercontent.com/u/1713346?v=4","gravatar_id":"","url":"https://api.github.com/users/yagodar","html_url":"https://github.com/yagodar","followers_url":"https://api.github.com/users/yagodar/followers","following_url":"https://api.github.com/users/yagodar/following{/other_user}","gists_url":"https://api.github.com/users/yagodar/gists{/gist_id}","starred_url":"https://api.github.com/users/yagodar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yagodar/subscriptions","organizations_url":"https://api.github.com/users/yagodar/orgs","repos_url":"https://api.github.com/users/yagodar/repos","events_url":"https://api.github.com/users/yagodar/events{/privacy}","received_events_url":"https://api.github.com/users/yagodar/received_events","type":"User","site_admin":false},"labels":[{"id":89047068,"url":"https://api.github.com/repos/libgdx/libgdx/labels/scene2d","name":"scene2d","color":"ff00ff","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2015-11-11T15:08:49Z","updated_at":"2015-11-23T10:46:38Z","closed_at":"2015-11-23T10:46:38Z","author_association":"NONE","body":"Hello! There is problem with `ScrollPane#setScrollbarsOnTop`.\n\nI use following code:\n\n``` java\nTable widget = new Table();\nwidget.defaults().expandX().width(800).pad(10);\n\nScrollPane.ScrollPaneStyle scrollPaneStyle = //default libgdx style;\nscrollPaneStyle.vScroll = null;\n\nScrollPane scrollPane = new ScrollPane(widget, scrollPaneStyle);\nscrollPane.setOverscroll(false, false);\nscrollPane.setFadeScrollBars(false);\nscrollPane.setScrollbarsOnTop(true);\n\nContainer container = new Container();\ncontainer.align(Align.bottom);\ncontainer.fillX();\ncontainer.setActor(scrollPane);\n\nTable table = new Table();\ntable.defaults().width(800);\ntable.add(/*some another container*/).height(300);\ntable.row();\ntable.add(container).height(100);\n\nwidget.add(/*label*/).width(/*width*/).align(/*align*/);\nwidget.row();\n...\nwidget.add(/*label*/).width(/*width*/).align(/*align*/);\nwidget.row();\n```\n\nThe problem is - scrollbars still drawing **not** on top of widget.\n\n**But** if i set this `scrollPane.setFadeScrollBars(true)` - all works as expected.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3558/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3557","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3557/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3557/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3557/events","html_url":"https://github.com/libgdx/libgdx/issues/3557","id":116070882,"number":3557,"title":"[Improvement] Move ShaderLoader from gdx-tests to gdx","user":{"login":"realitix","id":6367936,"avatar_url":"https://avatars1.githubusercontent.com/u/6367936?v=4","gravatar_id":"","url":"https://api.github.com/users/realitix","html_url":"https://github.com/realitix","followers_url":"https://api.github.com/users/realitix/followers","following_url":"https://api.github.com/users/realitix/following{/other_user}","gists_url":"https://api.github.com/users/realitix/gists{/gist_id}","starred_url":"https://api.github.com/users/realitix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realitix/subscriptions","organizations_url":"https://api.github.com/users/realitix/orgs","repos_url":"https://api.github.com/users/realitix/repos","events_url":"https://api.github.com/users/realitix/events{/privacy}","received_events_url":"https://api.github.com/users/realitix/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2015-11-10T09:41:20Z","updated_at":"2017-01-16T14:52:20Z","closed_at":"2015-11-12T06:12:22Z","author_association":"CONTRIBUTOR","body":"Currently, when we create shader, we have to copy/paste from default shader all needed property.\nWe should at least support #include notation.\nFortunately, ShaderLoader in tests supports this feature. It would be great to move it inside gdx and split default shader into small pieces.\nWhat do you think about it ( @xoppa ) ?\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3557/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3556","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3556/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3556/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3556/events","html_url":"https://github.com/libgdx/libgdx/pull/3556","id":115936636,"number":3556,"title":"BUTTON_CIRCLE code change 255 -> 111","user":{"login":"JFixby","id":1580663,"avatar_url":"https://avatars0.githubusercontent.com/u/1580663?v=4","gravatar_id":"","url":"https://api.github.com/users/JFixby","html_url":"https://github.com/JFixby","followers_url":"https://api.github.com/users/JFixby/followers","following_url":"https://api.github.com/users/JFixby/following{/other_user}","gists_url":"https://api.github.com/users/JFixby/gists{/gist_id}","starred_url":"https://api.github.com/users/JFixby/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JFixby/subscriptions","organizations_url":"https://api.github.com/users/JFixby/orgs","repos_url":"https://api.github.com/users/JFixby/repos","events_url":"https://api.github.com/users/JFixby/events{/privacy}","received_events_url":"https://api.github.com/users/JFixby/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2015-11-09T18:30:38Z","updated_at":"2016-01-09T17:50:19Z","closed_at":"2016-01-05T16:23:27Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3556","html_url":"https://github.com/libgdx/libgdx/pull/3556","diff_url":"https://github.com/libgdx/libgdx/pull/3556.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3556.patch"},"body":"BUTTON_CIRCLE and F12 are mapped to the same keycode (255)\nDiscussion thread: https://github.com/libgdx/libgdx/pull/1014\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3556/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3555","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3555/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3555/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3555/events","html_url":"https://github.com/libgdx/libgdx/issues/3555","id":115762892,"number":3555,"title":"Add a speed value to Music","user":{"login":"Voltasalt","id":8677813,"avatar_url":"https://avatars3.githubusercontent.com/u/8677813?v=4","gravatar_id":"","url":"https://api.github.com/users/Voltasalt","html_url":"https://github.com/Voltasalt","followers_url":"https://api.github.com/users/Voltasalt/followers","following_url":"https://api.github.com/users/Voltasalt/following{/other_user}","gists_url":"https://api.github.com/users/Voltasalt/gists{/gist_id}","starred_url":"https://api.github.com/users/Voltasalt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Voltasalt/subscriptions","organizations_url":"https://api.github.com/users/Voltasalt/orgs","repos_url":"https://api.github.com/users/Voltasalt/repos","events_url":"https://api.github.com/users/Voltasalt/events{/privacy}","received_events_url":"https://api.github.com/users/Voltasalt/received_events","type":"User","site_admin":false},"labels":[{"id":11336982,"url":"https://api.github.com/repos/libgdx/libgdx/labels/enhancement","name":"enhancement","color":"84b6eb","default":true}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-11-08T21:34:42Z","updated_at":"2015-11-16T23:32:47Z","closed_at":"2015-11-16T23:32:47Z","author_association":"NONE","body":"It could be useful to slow down or speed up a music track, as well as pitch shift, perhaps?\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3555/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3554","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3554/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3554/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3554/events","html_url":"https://github.com/libgdx/libgdx/issues/3554","id":115732974,"number":3554,"title":"Box2D Chain Shape, isLooped doesnt stick.","user":{"login":"piotr-j","id":2499728,"avatar_url":"https://avatars0.githubusercontent.com/u/2499728?v=4","gravatar_id":"","url":"https://api.github.com/users/piotr-j","html_url":"https://github.com/piotr-j","followers_url":"https://api.github.com/users/piotr-j/followers","following_url":"https://api.github.com/users/piotr-j/following{/other_user}","gists_url":"https://api.github.com/users/piotr-j/gists{/gist_id}","starred_url":"https://api.github.com/users/piotr-j/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/piotr-j/subscriptions","organizations_url":"https://api.github.com/users/piotr-j/orgs","repos_url":"https://api.github.com/users/piotr-j/repos","events_url":"https://api.github.com/users/piotr-j/events{/privacy}","received_events_url":"https://api.github.com/users/piotr-j/received_events","type":"User","site_admin":false},"labels":[{"id":11336980,"url":"https://api.github.com/repos/libgdx/libgdx/labels/bug","name":"bug","color":"fc2929","default":true}],"state":"open","locked":false,"assignee":{"login":"badlogic","id":514052,"avatar_url":"https://avatars1.githubusercontent.com/u/514052?v=4","gravatar_id":"","url":"https://api.github.com/users/badlogic","html_url":"https://github.com/badlogic","followers_url":"https://api.github.com/users/badlogic/followers","following_url":"https://api.github.com/users/badlogic/following{/other_user}","gists_url":"https://api.github.com/users/badlogic/gists{/gist_id}","starred_url":"https://api.github.com/users/badlogic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/badlogic/subscriptions","organizations_url":"https://api.github.com/users/badlogic/orgs","repos_url":"https://api.github.com/users/badlogic/repos","events_url":"https://api.github.com/users/badlogic/events{/privacy}","received_events_url":"https://api.github.com/users/badlogic/received_events","type":"User","site_admin":false},"assignees":[{"login":"badlogic","id":514052,"avatar_url":"https://avatars1.githubusercontent.com/u/514052?v=4","gravatar_id":"","url":"https://api.github.com/users/badlogic","html_url":"https://github.com/badlogic","followers_url":"https://api.github.com/users/badlogic/followers","following_url":"https://api.github.com/users/badlogic/following{/other_user}","gists_url":"https://api.github.com/users/badlogic/gists{/gist_id}","starred_url":"https://api.github.com/users/badlogic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/badlogic/subscriptions","organizations_url":"https://api.github.com/users/badlogic/orgs","repos_url":"https://api.github.com/users/badlogic/repos","events_url":"https://api.github.com/users/badlogic/events{/privacy}","received_events_url":"https://api.github.com/users/badlogic/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2015-11-08T12:58:20Z","updated_at":"2015-11-16T23:33:33Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"The underlying c implementations doesn't have isLooped in the chain which causes the flag to get lost on retrieval of the shape from the fixture. I believe that checking for indentical first and last vertex in `ChainShape#ChainShape(long)` constructor would be a reasonable fix.\n\nThis prints good, than broken. \n\n```\nprivate void chainTest() {\n    World world = new World(new Vector2(), true);\n    ChainShape chainShape = new ChainShape();\n    chainShape.createLoop(new float[] {-1, -1, 1, -1, 1, 1, -1, 1});\n    if (chainShape.isLooped()) {\n        System.out.println(\"New shape looks good\");\n    } else {\n        System.out.println(\"New shape looks broken\");\n    }\n    BodyDef chainBodyDef = new BodyDef();\n    chainBodyDef.type = BodyDef.BodyType.StaticBody;\n    Body body = world.createBody(chainBodyDef);\n    Fixture fixture = body.createFixture(chainShape, 0);\n    ChainShape shape = (ChainShape)fixture.getShape();\n    if (shape.isLooped()) {\n        System.out.println(\"Fixture shape looks good\");\n    } else {\n        System.out.println(\"Fixture shape looks broken\");\n    }\n    chainShape.dispose();\n    world.dispose();\n}\n```\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3554/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3553","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3553/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3553/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3553/events","html_url":"https://github.com/libgdx/libgdx/pull/3553","id":115717553,"number":3553,"title":"Added checkedOffset fields to ButtonStyle","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-11-08T08:21:48Z","updated_at":"2015-11-24T04:25:12Z","closed_at":"2015-11-23T10:48:18Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3553","html_url":"https://github.com/libgdx/libgdx/pull/3553","diff_url":"https://github.com/libgdx/libgdx/pull/3553.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3553.patch"},"body":"Added checkedOffset fields to button style. In my use-case, I use the pressed button to represent the checked state, and since my pressed button requires a label offset, I needed to add the following code to make the button look correct in the checked state as well.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3552","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3552/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3552/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3552/events","html_url":"https://github.com/libgdx/libgdx/issues/3552","id":115717043,"number":3552,"title":"List<T>  request function setAlignment (int alignment)","user":{"login":"TaiVuong","id":12879647,"avatar_url":"https://avatars0.githubusercontent.com/u/12879647?v=4","gravatar_id":"","url":"https://api.github.com/users/TaiVuong","html_url":"https://github.com/TaiVuong","followers_url":"https://api.github.com/users/TaiVuong/followers","following_url":"https://api.github.com/users/TaiVuong/following{/other_user}","gists_url":"https://api.github.com/users/TaiVuong/gists{/gist_id}","starred_url":"https://api.github.com/users/TaiVuong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TaiVuong/subscriptions","organizations_url":"https://api.github.com/users/TaiVuong/orgs","repos_url":"https://api.github.com/users/TaiVuong/repos","events_url":"https://api.github.com/users/TaiVuong/events{/privacy}","received_events_url":"https://api.github.com/users/TaiVuong/received_events","type":"User","site_admin":false},"labels":[{"id":11336982,"url":"https://api.github.com/repos/libgdx/libgdx/labels/enhancement","name":"enhancement","color":"84b6eb","default":true},{"id":89047068,"url":"https://api.github.com/repos/libgdx/libgdx/labels/scene2d","name":"scene2d","color":"ff00ff","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-11-08T08:02:29Z","updated_at":"2016-12-10T18:39:57Z","closed_at":"2016-12-10T18:39:57Z","author_association":"NONE","body":"```\nprivate int listAlign = Align.left;\n\npublic void setAlignment (int listAlign) {\n    this.listAlign = listAlign;\n    invalidate();\n}\npublic void layout () {\n...\nif ((listAlign & Align.left) == 0) {\n            if ((listAlign & Align.right) != 0)\n                textOffsetX += prefWidth;\n            else\n                textOffsetX += prefWidth / 2;\n}\nif (background != null) {\n            prefWidth += background.getLeftWidth() + background.getRightWidth();\n            prefHeight += background.getTopHeight() + background.getBottomHeight();\n\n        }\n}\n\n@Override\npublic void draw (Batch batch, float parentAlpha) {\n...\nfont.draw(batch, toString(item), x + textOffsetX, y + itemY - textOffsetY, 0, listAlign, false);\n}\n```\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3552/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3551","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3551/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3551/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3551/events","html_url":"https://github.com/libgdx/libgdx/pull/3551","id":115711664,"number":3551,"title":"Fixed typo in Eclipse import instructions (GdxSetupUI.java)","user":{"login":"msayson","id":7812369,"avatar_url":"https://avatars3.githubusercontent.com/u/7812369?v=4","gravatar_id":"","url":"https://api.github.com/users/msayson","html_url":"https://github.com/msayson","followers_url":"https://api.github.com/users/msayson/followers","following_url":"https://api.github.com/users/msayson/following{/other_user}","gists_url":"https://api.github.com/users/msayson/gists{/gist_id}","starred_url":"https://api.github.com/users/msayson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/msayson/subscriptions","organizations_url":"https://api.github.com/users/msayson/orgs","repos_url":"https://api.github.com/users/msayson/repos","events_url":"https://api.github.com/users/msayson/events{/privacy}","received_events_url":"https://api.github.com/users/msayson/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-11-08T06:20:46Z","updated_at":"2015-11-08T06:24:28Z","closed_at":"2015-11-08T06:24:28Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3551","html_url":"https://github.com/libgdx/libgdx/pull/3551","diff_url":"https://github.com/libgdx/libgdx/pull/3551.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3551.patch"},"body":"","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3550","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3550/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3550/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3550/events","html_url":"https://github.com/libgdx/libgdx/issues/3550","id":115686821,"number":3550,"title":"IsometricTiledMapRenderer does not work properly","user":{"login":"ftomassetti","id":439078,"avatar_url":"https://avatars2.githubusercontent.com/u/439078?v=4","gravatar_id":"","url":"https://api.github.com/users/ftomassetti","html_url":"https://github.com/ftomassetti","followers_url":"https://api.github.com/users/ftomassetti/followers","following_url":"https://api.github.com/users/ftomassetti/following{/other_user}","gists_url":"https://api.github.com/users/ftomassetti/gists{/gist_id}","starred_url":"https://api.github.com/users/ftomassetti/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ftomassetti/subscriptions","organizations_url":"https://api.github.com/users/ftomassetti/orgs","repos_url":"https://api.github.com/users/ftomassetti/repos","events_url":"https://api.github.com/users/ftomassetti/events{/privacy}","received_events_url":"https://api.github.com/users/ftomassetti/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2015-11-07T19:20:34Z","updated_at":"2015-11-16T23:35:51Z","closed_at":"2015-11-16T23:35:51Z","author_association":"NONE","body":"I am usign the IsometricTiledMapRenderer to render a TMX file but something is wrong with the layers.  See for comparison how the Tiled editor renders the same file\n![screenshot from 2015-11-07 20 19 33](https://cloud.githubusercontent.com/assets/439078/11016845/ee159860-858c-11e5-91d0-ae5bbab246fd.png)\n![screenshot from 2015-11-07 20 19 13](https://cloud.githubusercontent.com/assets/439078/11016846/ee1762c6-858c-11e5-9722-9df1351a38b8.png)\n\n```\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\n\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.InputProcessor;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.maps.tiled.TiledMap;\nimport com.badlogic.gdx.maps.tiled.TiledMapRenderer;\nimport com.badlogic.gdx.maps.tiled.TiledMapTileLayer;\nimport com.badlogic.gdx.maps.tiled.TmxMapLoader;\nimport com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer;\nimport com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;\nimport com.badlogic.gdx.math.MathUtils;\n\npublic class TileNavApp extends ApplicationAdapter implements InputProcessor {\n    Texture img;\n    TiledMap tiledMap;\n    OrthographicCamera camera;\n    TiledMapRenderer tiledMapRenderer;\n    long mapWidthInPixels;\n    long mapHeightInPixels;\n\n    @Override\n    public void create() {\n        float w = Gdx.graphics.getWidth();\n        float h = Gdx.graphics.getHeight();\n\n        camera = new OrthographicCamera();\n        camera.setToOrtho(false, w, h);\n        camera.position.set(w / 2f, h / 2f, 0);\n        camera.update();\n        //tiledMap = new TmxMapLoader().load(\"tiled_seed_54925.tmx\");\n        tiledMap = new TmxMapLoader().load(\"tiled_seed_888_comp.tmx\");\n        tiledMapRenderer = new IsometricTiledMapRenderer(tiledMap);\n        Gdx.input.setInputProcessor(this);\n\n        TiledMapTileLayer layer = (TiledMapTileLayer) tiledMap.getLayers().get(0);\n        mapWidthInPixels = (long)(layer.getTileWidth() * (Integer)tiledMap.getProperties().get(\"width\"));\n        mapHeightInPixels = (long)(layer.getTileHeight() * (Integer)tiledMap.getProperties().get(\"height\"));\n    }\n\n    @Override\n    public void render() {\n        Gdx.gl.glClearColor(1, 0, 0, 1);\n        Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n        camera.update();\n        tiledMapRenderer.setView(camera);\n        tiledMapRenderer.render();\n    }\n\n    @Override\n    public boolean keyDown(int keycode) {\n        return false;\n    }\n\n    @Override\n    public boolean keyUp(int keycode) {\n        float zoomInc = 0.5f;\n        int movInc = (int)(32.0f * camera.zoom);\n\n        if (keycode == Input.Keys.A) {\n            camera.zoom *= 2.0f;\n        }\n        if (keycode == Input.Keys.Q) {\n            camera.zoom /= 2.0f;\n            System.out.println(\"ZOOM OUT\");\n        }\n        if (keycode == Input.Keys.LEFT) {\n            camera.translate(-movInc, 0);\n        }\n        if (keycode == Input.Keys.RIGHT) {\n            camera.translate(movInc, 0);\n            System.out.println(\"RIGHT\");\n        }\n        if (keycode == Input.Keys.UP)\n            camera.translate(0, movInc);\n        if (keycode == Input.Keys.DOWN)\n            camera.translate(0, -movInc);\n\n        camera.zoom = Math.max(camera.zoom, 0.25f);\n        camera.zoom = Math.min(camera.zoom, 32.0f);\n\n        //camera.zoom = MathUtils.clamp(camera.zoom, 0.1f, 100 / camera.viewportWidth);\n\n        float effectiveViewportWidth = camera.viewportWidth * camera.zoom;\n        float effectiveViewportHeight = camera.viewportHeight * camera.zoom;\n\n        camera.position.x = Math.max(effectiveViewportWidth/2.0f, camera.position.x);\n        camera.position.y = Math.max(effectiveViewportHeight/2.0f, camera.position.y);\n        camera.position.x = Math.min(mapWidthInPixels - effectiveViewportWidth / 2.0f, camera.position.x);\n        camera.position.y = Math.min(mapHeightInPixels - effectiveViewportHeight / 2.0f, camera.position.y);\n\n        System.out.println(\"=== UPDATE ===\");\n        System.out.println(\"Position \" + camera.position.x + \", \"+camera.position.y);\n        System.out.println(\"Effective viewport \" + effectiveViewportWidth + \" x \" + effectiveViewportHeight);\n\n        return false;\n    }\n\n    @Override\n    public boolean keyTyped(char character) {\n\n        return false;\n    }\n\n    @Override\n    public boolean touchDown(int screenX, int screenY, int pointer, int button) {\n        return false;\n    }\n\n    @Override\n    public boolean touchUp(int screenX, int screenY, int pointer, int button) {\n        return false;\n    }\n\n    @Override\n    public boolean touchDragged(int screenX, int screenY, int pointer) {\n        return false;\n    }\n\n    @Override\n    public boolean mouseMoved(int screenX, int screenY) {\n        return false;\n    }\n\n    @Override\n    public boolean scrolled(int amount) {\n        return false;\n    }\n}\n```\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3550/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3549","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3549/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3549/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3549/events","html_url":"https://github.com/libgdx/libgdx/issues/3549","id":115672548,"number":3549,"title":"[Feature Request?] get asset with same path but different param?","user":{"login":"wonson","id":1496694,"avatar_url":"https://avatars3.githubusercontent.com/u/1496694?v=4","gravatar_id":"","url":"https://api.github.com/users/wonson","html_url":"https://github.com/wonson","followers_url":"https://api.github.com/users/wonson/followers","following_url":"https://api.github.com/users/wonson/following{/other_user}","gists_url":"https://api.github.com/users/wonson/gists{/gist_id}","starred_url":"https://api.github.com/users/wonson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wonson/subscriptions","organizations_url":"https://api.github.com/users/wonson/orgs","repos_url":"https://api.github.com/users/wonson/repos","events_url":"https://api.github.com/users/wonson/events{/privacy}","received_events_url":"https://api.github.com/users/wonson/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2015-11-07T15:26:42Z","updated_at":"2015-11-16T23:39:21Z","closed_at":"2015-11-16T23:39:21Z","author_association":"NONE","body":"As I know, AssetManager got a method called\n    public synchronized <T> T get (AssetDescriptor<T> assetDescriptor)\nand AssetDescriptor contains a AssetLoaderParameters<T> params\nbut  get (AssetDescriptor<T> assetDescriptor) ignores that params. \n\nIs it possible to make it also get it by determining params? \n\nAs I made a extended AssetLoader to return a Texture, but there are possibility that using the same file but with different params can return different Textures\n\nor maybe we can make it capable to set our own custom key instead of filename when AssetManager.load()?\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3548","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3548/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3548/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3548/events","html_url":"https://github.com/libgdx/libgdx/issues/3548","id":115670678,"number":3548,"title":"Android backend getNativeOrientation()","user":{"login":"Bazylot","id":15704246,"avatar_url":"https://avatars1.githubusercontent.com/u/15704246?v=4","gravatar_id":"","url":"https://api.github.com/users/Bazylot","html_url":"https://github.com/Bazylot","followers_url":"https://api.github.com/users/Bazylot/followers","following_url":"https://api.github.com/users/Bazylot/following{/other_user}","gists_url":"https://api.github.com/users/Bazylot/gists{/gist_id}","starred_url":"https://api.github.com/users/Bazylot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Bazylot/subscriptions","organizations_url":"https://api.github.com/users/Bazylot/orgs","repos_url":"https://api.github.com/users/Bazylot/repos","events_url":"https://api.github.com/users/Bazylot/events{/privacy}","received_events_url":"https://api.github.com/users/Bazylot/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-11-07T14:44:53Z","updated_at":"2015-11-07T15:52:50Z","closed_at":"2015-11-07T15:52:50Z","author_association":"NONE","body":"Hi, i am trying to handle screen orientation change in my app and i use Gdx.input.getNativeOrientation(). No matter what orientation the device is getNativeOrientation() method returns always Orientation.Portrait orientation. I looked into sources and i am pretty sure the condition that resolves orientation used in constructor at line 173 of AndroidInput.java is broken.\nThere is:\nif (((rotation == 0 || rotation == 180) && (mode.width >= mode.height))\n    || ((rotation == 90 || rotation == 270) && (mode.width <= mode.height))) {\n        nativeOrientation = Orientation.Landscape;\n    } else {\n        nativeOrientation = Orientation.Portrait;\n}\nbut should be something like:\nif (rotation == 0 || rotation == 180){\n    nativeOrientation = Orientation.Landscape;\n}else if (rotation == 90 || rotation == 270){\n    nativeOrientation = Orientation.Portrait;\n}else{\n    //default orientation, for example\n    nativeOrientation = Orientation.Portrait;\n    or initialize it at member level to make it sure it's initialized and screw this 'else'\n}\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3548/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3547","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3547/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3547/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3547/events","html_url":"https://github.com/libgdx/libgdx/pull/3547","id":115626255,"number":3547,"title":"Added final reference to the FileHandleResolver for which an AssetManager was created using","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-11-07T02:30:14Z","updated_at":"2015-11-15T18:04:31Z","closed_at":"2015-11-13T13:23:33Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3547","html_url":"https://github.com/libgdx/libgdx/pull/3547","diff_url":"https://github.com/libgdx/libgdx/pull/3547.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3547.patch"},"body":"Added final reference to the FileHandleResolver for which an AssetManager was created using. This is useful if custom AssetLoaders would like to use the same FileHandleResolver as the AssetManager for which they will belong.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3546","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3546/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3546/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3546/events","html_url":"https://github.com/libgdx/libgdx/pull/3546","id":115623999,"number":3546,"title":"Created protected methods so that subclasses of MusicLoader and SoundLoader can get asset reference","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-11-07T01:51:02Z","updated_at":"2017-01-16T14:58:43Z","closed_at":"2015-11-23T10:56:30Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3546","html_url":"https://github.com/libgdx/libgdx/pull/3546","diff_url":"https://github.com/libgdx/libgdx/pull/3546.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3546.patch"},"body":"Added protected methods to get the currently loaded Sound or Music object reference. This is nice so that subclasses of these AssetLoaders can override loadAsync and call the superclass method and then grab the asset reference for use. This cleans up subclasses who want to take advantage of the behavior of SoundLoader and MusicLoader greatly.\n\nThis PR replaces #3541 and #3542 \n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3545","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3545/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3545/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3545/events","html_url":"https://github.com/libgdx/libgdx/issues/3545","id":115554092,"number":3545,"title":"TooltipManager","user":{"login":"TaiVuong","id":12879647,"avatar_url":"https://avatars0.githubusercontent.com/u/12879647?v=4","gravatar_id":"","url":"https://api.github.com/users/TaiVuong","html_url":"https://github.com/TaiVuong","followers_url":"https://api.github.com/users/TaiVuong/followers","following_url":"https://api.github.com/users/TaiVuong/following{/other_user}","gists_url":"https://api.github.com/users/TaiVuong/gists{/gist_id}","starred_url":"https://api.github.com/users/TaiVuong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TaiVuong/subscriptions","organizations_url":"https://api.github.com/users/TaiVuong/orgs","repos_url":"https://api.github.com/users/TaiVuong/repos","events_url":"https://api.github.com/users/TaiVuong/events{/privacy}","received_events_url":"https://api.github.com/users/TaiVuong/received_events","type":"User","site_admin":false},"labels":[{"id":172870364,"url":"https://api.github.com/repos/libgdx/libgdx/labels/need%20more%20info","name":"need more info","color":"bfdadc","default":false},{"id":89047068,"url":"https://api.github.com/repos/libgdx/libgdx/labels/scene2d","name":"scene2d","color":"ff00ff","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-11-06T17:47:38Z","updated_at":"2015-11-25T17:09:07Z","closed_at":"2015-11-25T17:09:07Z","author_association":"NONE","body":"Tooltip always wrong position with \"Timer.schedule(showTask, time)\" (position = old position if touch down)\nand true with \"showTask.run()\"\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3545/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3544","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3544/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3544/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3544/events","html_url":"https://github.com/libgdx/libgdx/issues/3544","id":115445125,"number":3544,"title":"Remove GdxRuntimeException from AssetManager.unload(String) or add a new function","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-11-06T06:27:18Z","updated_at":"2015-11-07T00:25:51Z","closed_at":"2015-11-07T00:25:51Z","author_association":"CONTRIBUTOR","body":"I would be interested in adding an additional method to the AssetManager class which will unload an asset if it exists and will not throw an error otherwise. _AssetManager.tryUnload(String)_ would increase the usability of LibGdx by allowing users to unload assets without needing to worry about whether or not the asset was loaded when the unload action takes place.\n\nCurrently attempting to unload an asset which is not loaded will throw a _GdxRuntimeException_, and a workaround for this behavior is to simply check if the asset is loaded via _AssetManager.isLoaded(String)_ before unloading, however I believe this to be overly verbose for the most common case (when the developer knows an asset is loaded) and _AssetManager.unload_ should not throw this exception in the first place. If an asset is not loaded, then why would we care that explicitly unloading it did not work? Alternatively, if that information is valuable to users, then perhaps a boolean return of whether or not the asset existed would be acceptable.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3544/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3543","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3543/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3543/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3543/events","html_url":"https://github.com/libgdx/libgdx/pull/3543","id":115433936,"number":3543,"title":"Added FileHandleResolver reference","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-06T05:02:51Z","updated_at":"2015-11-15T18:04:43Z","closed_at":"2015-11-07T01:52:22Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3543","html_url":"https://github.com/libgdx/libgdx/pull/3543","diff_url":"https://github.com/libgdx/libgdx/pull/3543.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3543.patch"},"body":"Added final reference to the FileHandleResolver used by the AssetManager instance. This is primarily intended for use with custom Loaders who want to make use of the same FileHandleResolver as the asset manager after it has already been instantiated.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3543/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3542","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3542/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3542/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3542/events","html_url":"https://github.com/libgdx/libgdx/pull/3542","id":115426408,"number":3542,"title":"Changed sound object reference to protected access","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-06T03:22:00Z","updated_at":"2015-11-15T18:04:49Z","closed_at":"2015-11-07T01:35:21Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3542","html_url":"https://github.com/libgdx/libgdx/pull/3542","diff_url":"https://github.com/libgdx/libgdx/pull/3542.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3542.patch"},"body":"Changed currently created sound object to protected access to allow for extensions of SoundLoader grab it after loading.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3542/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3541","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3541/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3541/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3541/events","html_url":"https://github.com/libgdx/libgdx/pull/3541","id":115426394,"number":3541,"title":"Changed music object reference to protected access","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-06T03:21:51Z","updated_at":"2015-11-15T18:04:54Z","closed_at":"2015-11-07T01:35:07Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3541","html_url":"https://github.com/libgdx/libgdx/pull/3541","diff_url":"https://github.com/libgdx/libgdx/pull/3541.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3541.patch"},"body":"Changed currently created music object to protected access to allow for extensions of MusicLoader grab it after loading.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3541/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3540","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3540/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3540/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3540/events","html_url":"https://github.com/libgdx/libgdx/pull/3540","id":115321278,"number":3540,"title":"Shadow system 4 / 6","user":{"login":"realitix","id":6367936,"avatar_url":"https://avatars1.githubusercontent.com/u/6367936?v=4","gravatar_id":"","url":"https://api.github.com/users/realitix","html_url":"https://github.com/realitix","followers_url":"https://api.github.com/users/realitix/followers","following_url":"https://api.github.com/users/realitix/following{/other_user}","gists_url":"https://api.github.com/users/realitix/gists{/gist_id}","starred_url":"https://api.github.com/users/realitix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realitix/subscriptions","organizations_url":"https://api.github.com/users/realitix/orgs","repos_url":"https://api.github.com/users/realitix/repos","events_url":"https://api.github.com/users/realitix/events{/privacy}","received_events_url":"https://api.github.com/users/realitix/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-11-05T16:29:34Z","updated_at":"2015-11-19T18:35:58Z","closed_at":"2015-11-19T18:35:47Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3540","html_url":"https://github.com/libgdx/libgdx/pull/3540","diff_url":"https://github.com/libgdx/libgdx/pull/3540.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3540.patch"},"body":"Add RealisticShadowSystem.\nGood luck for reviewing ! Here come struggle with shaders !\n\nSee #3347 \n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3540/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3539","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3539/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3539/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3539/events","html_url":"https://github.com/libgdx/libgdx/pull/3539","id":115238728,"number":3539,"title":"Create GlTextureData","user":{"login":"realitix","id":6367936,"avatar_url":"https://avatars1.githubusercontent.com/u/6367936?v=4","gravatar_id":"","url":"https://api.github.com/users/realitix","html_url":"https://github.com/realitix","followers_url":"https://api.github.com/users/realitix/followers","following_url":"https://api.github.com/users/realitix/following{/other_user}","gists_url":"https://api.github.com/users/realitix/gists{/gist_id}","starred_url":"https://api.github.com/users/realitix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realitix/subscriptions","organizations_url":"https://api.github.com/users/realitix/orgs","repos_url":"https://api.github.com/users/realitix/repos","events_url":"https://api.github.com/users/realitix/events{/privacy}","received_events_url":"https://api.github.com/users/realitix/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-11-05T09:07:53Z","updated_at":"2015-11-14T20:51:03Z","closed_at":"2015-11-14T20:51:03Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3539","html_url":"https://github.com/libgdx/libgdx/pull/3539","diff_url":"https://github.com/libgdx/libgdx/pull/3539.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3539.patch"},"body":"Use this new TextureData for FrameBuffer and FrameBufferCubemap.\nAllow to save wasted memory.\n\nI tested it with FrameBufferTest and FrameBufferCubemapTest and it works\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3538","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3538/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3538/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3538/events","html_url":"https://github.com/libgdx/libgdx/issues/3538","id":115179970,"number":3538,"title":"Tooltips : First display bug","user":{"login":"KyuBlade","id":7126657,"avatar_url":"https://avatars2.githubusercontent.com/u/7126657?v=4","gravatar_id":"","url":"https://api.github.com/users/KyuBlade","html_url":"https://github.com/KyuBlade","followers_url":"https://api.github.com/users/KyuBlade/followers","following_url":"https://api.github.com/users/KyuBlade/following{/other_user}","gists_url":"https://api.github.com/users/KyuBlade/gists{/gist_id}","starred_url":"https://api.github.com/users/KyuBlade/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KyuBlade/subscriptions","organizations_url":"https://api.github.com/users/KyuBlade/orgs","repos_url":"https://api.github.com/users/KyuBlade/repos","events_url":"https://api.github.com/users/KyuBlade/events{/privacy}","received_events_url":"https://api.github.com/users/KyuBlade/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-11-05T00:14:32Z","updated_at":"2015-11-05T08:07:05Z","closed_at":"2015-11-05T08:07:05Z","author_association":"CONTRIBUTOR","body":"There a bug with the tooltip manager when you change the initialTime, it still use the default value for the first display attempt.\n\nThe problem must come from here :\n\nhttps://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TooltipManager.java#L56\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3538/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3537","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3537/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3537/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3537/events","html_url":"https://github.com/libgdx/libgdx/pull/3537","id":114922249,"number":3537,"title":"Added gdx-kiwi and gdx-lml to gdx-setup.","user":{"login":"czyzby","id":11707612,"avatar_url":"https://avatars0.githubusercontent.com/u/11707612?v=4","gravatar_id":"","url":"https://api.github.com/users/czyzby","html_url":"https://github.com/czyzby","followers_url":"https://api.github.com/users/czyzby/followers","following_url":"https://api.github.com/users/czyzby/following{/other_user}","gists_url":"https://api.github.com/users/czyzby/gists{/gist_id}","starred_url":"https://api.github.com/users/czyzby/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/czyzby/subscriptions","organizations_url":"https://api.github.com/users/czyzby/orgs","repos_url":"https://api.github.com/users/czyzby/repos","events_url":"https://api.github.com/users/czyzby/events{/privacy}","received_events_url":"https://api.github.com/users/czyzby/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2015-11-03T22:11:47Z","updated_at":"2015-11-24T02:18:34Z","closed_at":"2015-11-16T23:41:53Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3537","html_url":"https://github.com/libgdx/libgdx/pull/3537","diff_url":"https://github.com/libgdx/libgdx/pull/3537.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3537.patch"},"body":"Out of all of my LibGDX utilities, I think `gdx-kiwi` and `gdx-lml` are the most \"widely\" used (if you can call about 10 people a \"wide\" group) and pretty well maintained. I try to keep the libs up-to-date with the newest LibGDX versions. I hope they're good enough to make it into the external libraries. ;)\n\nBy the way, I also wanted to include `gdx-lml-vis`, which basically allows to parse HTML-like templates into `VisUI` widgets, but it requires additional dependency with a separate version (sources of `vis-ui`). When I do this:\n\n```\n<dependency>com.kotcrab.vis:vis-ui:0.9.2:sources</dependency>\n```\n\n...this is produced:\n\n```\ncompile \"com.kotcrab.vis:vis-ui:0.9.2:sources:1.2.1.7.1\"\n```\n\nLooks like lib's `<version>` setting is included in all of the dependencies, even if they already have the version set.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3536","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3536/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3536/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3536/events","html_url":"https://github.com/libgdx/libgdx/pull/3536","id":114908461,"number":3536,"title":"Update VisUI extension","user":{"login":"kotcrab","id":4594081,"avatar_url":"https://avatars1.githubusercontent.com/u/4594081?v=4","gravatar_id":"","url":"https://api.github.com/users/kotcrab","html_url":"https://github.com/kotcrab","followers_url":"https://api.github.com/users/kotcrab/followers","following_url":"https://api.github.com/users/kotcrab/following{/other_user}","gists_url":"https://api.github.com/users/kotcrab/gists{/gist_id}","starred_url":"https://api.github.com/users/kotcrab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kotcrab/subscriptions","organizations_url":"https://api.github.com/users/kotcrab/orgs","repos_url":"https://api.github.com/users/kotcrab/repos","events_url":"https://api.github.com/users/kotcrab/events{/privacy}","received_events_url":"https://api.github.com/users/kotcrab/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-11-03T20:59:03Z","updated_at":"2015-11-03T21:56:32Z","closed_at":"2015-11-03T21:56:31Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3536","html_url":"https://github.com/libgdx/libgdx/pull/3536","diff_url":"https://github.com/libgdx/libgdx/pull/3536.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3536.patch"},"body":"","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3536/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3535","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3535/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3535/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3535/events","html_url":"https://github.com/libgdx/libgdx/pull/3535","id":114901661,"number":3535,"title":"Improve DragAndDrop#Payload javadoc","user":{"login":"avianey","id":1625652,"avatar_url":"https://avatars3.githubusercontent.com/u/1625652?v=4","gravatar_id":"","url":"https://api.github.com/users/avianey","html_url":"https://github.com/avianey","followers_url":"https://api.github.com/users/avianey/followers","following_url":"https://api.github.com/users/avianey/following{/other_user}","gists_url":"https://api.github.com/users/avianey/gists{/gist_id}","starred_url":"https://api.github.com/users/avianey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/avianey/subscriptions","organizations_url":"https://api.github.com/users/avianey/orgs","repos_url":"https://api.github.com/users/avianey/repos","events_url":"https://api.github.com/users/avianey/events{/privacy}","received_events_url":"https://api.github.com/users/avianey/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-11-03T20:25:12Z","updated_at":"2015-11-04T11:24:53Z","closed_at":"2015-11-04T11:24:53Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3535","html_url":"https://github.com/libgdx/libgdx/pull/3535","diff_url":"https://github.com/libgdx/libgdx/pull/3535.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3535.patch"},"body":"Warn on the use of source actor as Payload#setDragActor(Actor)\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3535/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3534","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3534/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3534/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3534/events","html_url":"https://github.com/libgdx/libgdx/pull/3534","id":114847650,"number":3534,"title":"Fixing memory leak related to TouchFocus and pooling","user":{"login":"cjuillard","id":2320281,"avatar_url":"https://avatars3.githubusercontent.com/u/2320281?v=4","gravatar_id":"","url":"https://api.github.com/users/cjuillard","html_url":"https://github.com/cjuillard","followers_url":"https://api.github.com/users/cjuillard/followers","following_url":"https://api.github.com/users/cjuillard/following{/other_user}","gists_url":"https://api.github.com/users/cjuillard/gists{/gist_id}","starred_url":"https://api.github.com/users/cjuillard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjuillard/subscriptions","organizations_url":"https://api.github.com/users/cjuillard/orgs","repos_url":"https://api.github.com/users/cjuillard/repos","events_url":"https://api.github.com/users/cjuillard/events{/privacy}","received_events_url":"https://api.github.com/users/cjuillard/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-11-03T15:57:51Z","updated_at":"2015-11-04T11:25:39Z","closed_at":"2015-11-04T11:25:39Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3534","html_url":"https://github.com/libgdx/libgdx/pull/3534","diff_url":"https://github.com/libgdx/libgdx/pull/3534.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3534.patch"},"body":"Generally doesn't seem to be too big an issue since the TouchFocus objects seem to get pulled out of the pool and overwritten fairly often (at least in my case), but still a leak.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3534/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3533","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3533/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3533/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3533/events","html_url":"https://github.com/libgdx/libgdx/issues/3533","id":114752512,"number":3533,"title":"add support for global audio volumes","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2015-11-03T06:38:41Z","updated_at":"2015-11-06T14:03:07Z","closed_at":"2015-11-06T03:16:29Z","author_association":"CONTRIBUTOR","body":"I was looking through the API, and while there are some methods for setting the volume of a sound effect when it is played (or in the case of music, while it is playing), there does not seem to be a globalized audio manager with methods for _setSoundVolume(float)_ or _setMusicVolume(float)_ which would take effect across all sounds and persist as the default for new sounds (i.e., this setting would be default and overridden by sound, or applied on top of the sound, so if global sound volume is _0.5f_ and the sound is played at _0.5f_, the audio would play at _0.25f_).\n\nMy current implementation to add similar functionality is becoming overly verbose, and I feel like this feature would greatly easy the production of more robust audio. In the meantime as a workaround, I am attempting to use a wrapper to create all of the audio objects and manage their volume levels.\n\nIs my use-case intended to be accomplished with using a custom _AudioDevice_? If so, is there a way to plug that _AudioDevice_ into _Gdx.audio_ as the default audio device?\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3533/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3532","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3532/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3532/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3532/events","html_url":"https://github.com/libgdx/libgdx/pull/3532","id":114740470,"number":3532,"title":"Allow custom shaders in ShapeRenderer","user":{"login":"cypherdare","id":1843131,"avatar_url":"https://avatars2.githubusercontent.com/u/1843131?v=4","gravatar_id":"","url":"https://api.github.com/users/cypherdare","html_url":"https://github.com/cypherdare","followers_url":"https://api.github.com/users/cypherdare/followers","following_url":"https://api.github.com/users/cypherdare/following{/other_user}","gists_url":"https://api.github.com/users/cypherdare/gists{/gist_id}","starred_url":"https://api.github.com/users/cypherdare/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cypherdare/subscriptions","organizations_url":"https://api.github.com/users/cypherdare/orgs","repos_url":"https://api.github.com/users/cypherdare/repos","events_url":"https://api.github.com/users/cypherdare/events{/privacy}","received_events_url":"https://api.github.com/users/cypherdare/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-03T04:40:01Z","updated_at":"2016-01-05T16:28:01Z","closed_at":"2016-01-05T16:28:00Z","author_association":"CONTRIBUTOR","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3532","html_url":"https://github.com/libgdx/libgdx/pull/3532","diff_url":"https://github.com/libgdx/libgdx/pull/3532.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3532.patch"},"body":"Exposes `setShader()` in the ImmediateModeRenderer interface so the shader can be changed in ShapeRenderer. I figure this is fine now that ES 1.0 is no longer supported.\n\nPreviously, ImmediateModeRenderer20 disposes its default shader if you try to change its shader with `setShader`. This seems to me like it would be undesired behavior in almost all cases, and it is clunky to work around if you want to keep that original shader alive. I am suggesting changing its behavior to be like SpriteBatch, i.e. the default shader is only disposed when the renderer is disposed. And the shader can be changed in between `begin` and `end` without issue.\n\nI think this is unlikely to affect existing projects, since most of ImmediateModeRenderer20's members were private and ImmediateModeRenderer20 needs to be disposed anyway. I suppose it could result in a shader hanging around longer than desired if someone was counting on it getting disposed when swapping to a different one, but this seems to me like a rare use case. If someone does need to maintain that behavior, they only need to call dispose manually on the original default shader the first time it is changed out.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3531","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3531/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3531/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3531/events","html_url":"https://github.com/libgdx/libgdx/pull/3531","id":114594114,"number":3531,"title":"ShaderProgram: separate create and link stages","user":{"login":"code-disaster","id":4644167,"avatar_url":"https://avatars1.githubusercontent.com/u/4644167?v=4","gravatar_id":"","url":"https://api.github.com/users/code-disaster","html_url":"https://github.com/code-disaster","followers_url":"https://api.github.com/users/code-disaster/followers","following_url":"https://api.github.com/users/code-disaster/following{/other_user}","gists_url":"https://api.github.com/users/code-disaster/gists{/gist_id}","starred_url":"https://api.github.com/users/code-disaster/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/code-disaster/subscriptions","organizations_url":"https://api.github.com/users/code-disaster/orgs","repos_url":"https://api.github.com/users/code-disaster/repos","events_url":"https://api.github.com/users/code-disaster/events{/privacy}","received_events_url":"https://api.github.com/users/code-disaster/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-02T13:32:57Z","updated_at":"2016-02-24T22:42:24Z","closed_at":"2015-11-08T19:59:38Z","author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/libgdx/libgdx/pulls/3531","html_url":"https://github.com/libgdx/libgdx/pull/3531","diff_url":"https://github.com/libgdx/libgdx/pull/3531.diff","patch_url":"https://github.com/libgdx/libgdx/pull/3531.patch"},"body":"This modification does not change anything by default. The reason I did it is because I want to inject custom code between glCreateProgram() and glLinkProgram(). ShaderProgram.createProgram() is declared _protected_ to allow @Override in subclasses.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3530","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3530/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3530/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3530/events","html_url":"https://github.com/libgdx/libgdx/issues/3530","id":114576323,"number":3530,"title":"SelectBox#setStyle Does Not Update Nested Styles","user":{"login":"3xp0n3nt","id":1281275,"avatar_url":"https://avatars1.githubusercontent.com/u/1281275?v=4","gravatar_id":"","url":"https://api.github.com/users/3xp0n3nt","html_url":"https://github.com/3xp0n3nt","followers_url":"https://api.github.com/users/3xp0n3nt/followers","following_url":"https://api.github.com/users/3xp0n3nt/following{/other_user}","gists_url":"https://api.github.com/users/3xp0n3nt/gists{/gist_id}","starred_url":"https://api.github.com/users/3xp0n3nt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/3xp0n3nt/subscriptions","organizations_url":"https://api.github.com/users/3xp0n3nt/orgs","repos_url":"https://api.github.com/users/3xp0n3nt/repos","events_url":"https://api.github.com/users/3xp0n3nt/events{/privacy}","received_events_url":"https://api.github.com/users/3xp0n3nt/received_events","type":"User","site_admin":false},"labels":[{"id":89047068,"url":"https://api.github.com/repos/libgdx/libgdx/labels/scene2d","name":"scene2d","color":"ff00ff","default":false}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-02T11:26:57Z","updated_at":"2016-11-25T01:44:27Z","closed_at":"2016-11-25T01:23:18Z","author_association":"CONTRIBUTOR","body":"`SelectBox#setStyle` does not update its nested styles, `ScrollPaneStyle` & `ListStyle`. These two styles must currently be updated manually, via `SelectBox#getScrollPane#setStyle` & `SelectBox#getList#setStyle`, in addition to calling `SelectBox#setStyle`.\n\nThis is unexpected behavior, resulting in a partially styled `SelectBox`, and took me quite a long time to figure out. This should be a very simple fix btw, but am not currently set up to test LibGDX source.\n\nProposed (untested) fix:\n\n```\ndiff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java\nindex 9c53fc2..8ff1366 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/SelectBox.java\n@@ -116,6 +116,8 @@ public class SelectBox<T> extends Widget implements Disableable {\n        public void setStyle (SelectBoxStyle style) {\n                if (style == null) throw new IllegalArgumentException(\"style cannot be null.\");\n                this.style = style;\n+    selectBoxList.setStyle (style.scrollStyle);\n+    selectBoxList.list.setStyle (style.listStyle);\n                invalidateHierarchy();\n        }\n```\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}},{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3529","repository_url":"https://api.github.com/repos/libgdx/libgdx","labels_url":"https://api.github.com/repos/libgdx/libgdx/issues/3529/labels{/name}","comments_url":"https://api.github.com/repos/libgdx/libgdx/issues/3529/comments","events_url":"https://api.github.com/repos/libgdx/libgdx/issues/3529/events","html_url":"https://github.com/libgdx/libgdx/issues/3529","id":114562675,"number":3529,"title":"Input.Keys.BACK and Input.Keys.MENU conflict","user":{"login":"collinsmith","id":4914327,"avatar_url":"https://avatars0.githubusercontent.com/u/4914327?v=4","gravatar_id":"","url":"https://api.github.com/users/collinsmith","html_url":"https://github.com/collinsmith","followers_url":"https://api.github.com/users/collinsmith/followers","following_url":"https://api.github.com/users/collinsmith/following{/other_user}","gists_url":"https://api.github.com/users/collinsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/collinsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/collinsmith/subscriptions","organizations_url":"https://api.github.com/users/collinsmith/orgs","repos_url":"https://api.github.com/users/collinsmith/repos","events_url":"https://api.github.com/users/collinsmith/events{/privacy}","received_events_url":"https://api.github.com/users/collinsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-11-02T10:02:02Z","updated_at":"2015-11-11T23:53:54Z","closed_at":"2015-11-10T14:11:52Z","author_association":"CONTRIBUTOR","body":"My device that I test using is a _Galaxy Note 5_, and on this device, the hardware **BACK** and **MENU** buttons are the same, e.g., tap = **BACK**, short hold = **MENU**. The issue that I am experiencing is that I am trying to catch the **MENU** key press to open the menu, and the **BACK** key press to exit the application. The behavior in this case is that the application exits once the **BACK** key is pressed, even though my intention is to perform a short press on the hardware button to actually call the **MENU** key.\n\nI've already looked through the documentation and tried a few tricks using _Input.isKeyPressed(int)_ and _Input.isKeyJustPressed(int)_, however I have not had success. Does anyone have any ideas on how to resolve this issue? My current thoughts would be to impose some delay on the catching of the **BACK** key until I can be sure the user did not intend to select the **MENU** key instead.\n","reactions":{"url":"https://api.github.com/repos/libgdx/libgdx/issues/3529/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0}}],"meta":{"x-ratelimit-limit":"5000","x-ratelimit-remaining":"4954","x-ratelimit-reset":"1506844633","x-github-request-id":"DA52:028A:1AAF917:2EC4CD2:59D09482","x-github-media-type":"github.squirrel-girl-preview","link":"<https://api.github.com/repositories/5373551/issues?state=all&page=47>; rel=\"next\", <https://api.github.com/repositories/5373551/issues?state=all&page=164>; rel=\"last\", <https://api.github.com/repositories/5373551/issues?state=all&page=1>; rel=\"first\", <https://api.github.com/repositories/5373551/issues?state=all&page=45>; rel=\"prev\"","etag":"\"74625e052f3de7c798702959e7f2a614\"","status":"200 OK"}}
